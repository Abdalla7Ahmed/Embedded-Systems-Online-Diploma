
ATMEG32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c51  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079b  00000000  00000000  00001015  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b8  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00001e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f5  00000000  00000000  00002020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004fd  00000000  00000000  00002515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  7a:	0c 94 24 01 	jmp	0x248	; 0x248 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_lcd_kick>:
    DataDir_LCD_PORT =0xFF;
	CLEARBIT(LCD_CTRL,RW_SWITCH); // Write mood
}
void LCD_lcd_kick(void)
{
	CLEARBIT(LCD_CTRL,EN_SWITCH);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_lcd_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_lcd_kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	SETBIT(LCD_CTRL,EN_SWITCH);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	81 60       	ori	r24, 0x01	; 1
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_WRITE_CHAR>:
		LCD_lcd_kick();	
	 #endif

}
void LCD_WRITE_CHAR(unsigned char character)
{
  9c:	cf 93       	push	r28
  9e:	c8 2f       	mov	r28, r24
		SETBIT(LCD_CTRL,RS_SWITCH);
		_delay_ms(1);
		LCD_lcd_kick();
    #endif
    #ifdef FOUR_BIT_MODE
		LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	8f 70       	andi	r24, 0x0F	; 15
  a4:	9c 2f       	mov	r25, r28
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	89 2b       	or	r24, r25
  aa:	8b bb       	out	0x1b, r24	; 27
		SETBIT(LCD_CTRL,RS_SWITCH);
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	88 bb       	out	0x18, r24	; 24
		CLEARBIT(LCD_CTRL,RW_SWITCH);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8d 7f       	andi	r24, 0xFD	; 253
  b6:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
  b8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character <<DATA_shift);
  bc:	2b b3       	in	r18, 0x1b	; 27
  be:	30 e1       	ldi	r19, 0x10	; 16
  c0:	c3 9f       	mul	r28, r19
  c2:	c0 01       	movw	r24, r0
  c4:	11 24       	eor	r1, r1
  c6:	92 2f       	mov	r25, r18
  c8:	9f 70       	andi	r25, 0x0F	; 15
  ca:	89 2b       	or	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
		SETBIT(LCD_CTRL,RS_SWITCH);
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	88 bb       	out	0x18, r24	; 24
		CLEARBIT(LCD_CTRL,RW_SWITCH);
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
    #endif

}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_check_lcd_isbusy>:

}

void LCD_check_lcd_isbusy(void)
{
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  e2:	8a b3       	in	r24, 0x1a	; 26
  e4:	8f 70       	andi	r24, 0x0F	; 15
  e6:	8a bb       	out	0x1a, r24	; 26
	SETBIT(LCD_CTRL,RW_SWITCH); // read mood
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	88 bb       	out	0x18, r24	; 24
	CLEARBIT(LCD_CTRL,RS_SWITCH);
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	88 bb       	out	0x18, r24	; 24
    LCD_lcd_kick();
  f4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
    DataDir_LCD_PORT =0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	8a bb       	out	0x1a, r24	; 26
	CLEARBIT(LCD_CTRL,RW_SWITCH); // Write mood
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	8d 7f       	andi	r24, 0xFD	; 253
 100:	88 bb       	out	0x18, r24	; 24
 102:	08 95       	ret

00000104 <LCD_WRITE_COMMAND>:
    	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);

}
void LCD_WRITE_COMMAND(unsigned char command)
{
 104:	cf 93       	push	r28
 106:	c8 2f       	mov	r28, r24
	LCD_check_lcd_isbusy();
 108:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_check_lcd_isbusy>
		CLEARBIT(LCD_CTRL,RS_SWITCH);
		_delay_ms(1);
		LCD_lcd_kick();	
    #endif	
    #ifdef FOUR_BIT_MODE
		LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	8f 70       	andi	r24, 0x0F	; 15
 110:	9c 2f       	mov	r25, r28
 112:	90 7f       	andi	r25, 0xF0	; 240
 114:	89 2b       	or	r24, r25
 116:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(LCD_CTRL,RW_SWITCH);
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	88 bb       	out	0x18, r24	; 24
		CLEARBIT(LCD_CTRL,RS_SWITCH);
 11e:	88 b3       	in	r24, 0x18	; 24
 120:	8b 7f       	andi	r24, 0xFB	; 251
 122:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();
 124:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (command << DATA_shift);
 128:	2b b3       	in	r18, 0x1b	; 27
 12a:	30 e1       	ldi	r19, 0x10	; 16
 12c:	c3 9f       	mul	r28, r19
 12e:	c0 01       	movw	r24, r0
 130:	11 24       	eor	r1, r1
 132:	92 2f       	mov	r25, r18
 134:	9f 70       	andi	r25, 0x0F	; 15
 136:	89 2b       	or	r24, r25
 138:	8b bb       	out	0x1b, r24	; 27
		CLEARBIT(LCD_CTRL,RW_SWITCH);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	8d 7f       	andi	r24, 0xFD	; 253
 13e:	88 bb       	out	0x18, r24	; 24
		CLEARBIT(LCD_CTRL,RS_SWITCH);
 140:	88 b3       	in	r24, 0x18	; 24
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	88 bb       	out	0x18, r24	; 24
		LCD_lcd_kick();	
 146:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	 #endif

}
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <LCD_clear_screen>:
	_delay_ms(50);
	SETBIT(LCD_CTRL,EN_SWITCH);
}
void LCD_clear_screen()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
 154:	08 95       	ret

00000156 <LCD_INIT>:
 156:	87 e8       	ldi	r24, 0x87	; 135
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_INIT+0x4>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_INIT+0xa>
 160:	00 00       	nop
#include "lcd.h"

void LCD_INIT()
{
	_delay_ms(20);
	LCD_check_lcd_isbusy();
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_check_lcd_isbusy>
	SETBIT(DataDir_LCD_CTRL,EN_SWITCH);
 166:	87 b3       	in	r24, 0x17	; 23
 168:	81 60       	ori	r24, 0x01	; 1
 16a:	87 bb       	out	0x17, r24	; 23
	SETBIT(DataDir_LCD_CTRL,RW_SWITCH);
 16c:	87 b3       	in	r24, 0x17	; 23
 16e:	82 60       	ori	r24, 0x02	; 2
 170:	87 bb       	out	0x17, r24	; 23
	SETBIT(DataDir_LCD_CTRL,RS_SWITCH);
 172:	87 b3       	in	r24, 0x17	; 23
 174:	84 60       	ori	r24, 0x04	; 4
 176:	87 bb       	out	0x17, r24	; 23
		
	CLEARBIT(LCD_CTRL,EN_SWITCH);
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	8e 7f       	andi	r24, 0xFE	; 254
 17c:	88 bb       	out	0x18, r24	; 24
	CLEARBIT(LCD_CTRL,RS_SWITCH);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	8b 7f       	andi	r24, 0xFB	; 251
 182:	88 bb       	out	0x18, r24	; 24
	CLEARBIT(LCD_CTRL,RW_SWITCH);
 184:	88 b3       	in	r24, 0x18	; 24
 186:	8d 7f       	andi	r24, 0xFD	; 253
 188:	88 bb       	out	0x18, r24	; 24
		
	DataDir_LCD_PORT=0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	8a bb       	out	0x1a, r24	; 26
 18e:	85 ea       	ldi	r24, 0xA5	; 165
 190:	9e e0       	ldi	r25, 0x0E	; 14
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <LCD_INIT+0x3c>
 196:	00 c0       	rjmp	.+0      	; 0x198 <LCD_INIT+0x42>
 198:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();	
 19a:	0e 94 a7 00 	call	0x14e	; 0x14e <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
   #endif
   #ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(0x02);
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
   #endif
    	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
    	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
    	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
 1bc:	08 95       	ret

000001be <LCD_GOTO_XY>:
}
void LCD_clear_screen()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}
void LCD_GOTO_XY(unsigned char line, unsigned char position){
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
 1c2:	c8 2f       	mov	r28, r24
 1c4:	d6 2f       	mov	r29, r22
	if (line == 0)
 1c6:	81 11       	cpse	r24, r1
 1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 1ca:	60 31       	cpi	r22, 0x10	; 16
 1cc:	20 f4       	brcc	.+8      	; 0x1d6 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	86 0f       	add	r24, r22
 1d2:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 1)
 1d6:	c1 30       	cpi	r28, 0x01	; 1
 1d8:	31 f4       	brne	.+12     	; 0x1e6 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 1da:	d0 31       	cpi	r29, 0x10	; 16
 1dc:	20 f4       	brcc	.+8      	; 0x1e6 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 1de:	80 ec       	ldi	r24, 0xC0	; 192
 1e0:	8d 0f       	add	r24, r29
 1e2:	0e 94 82 00 	call	0x104	; 0x104 <LCD_WRITE_COMMAND>
		}
	}
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:


int main(void)
{
	uint8_t Received_data;
	LCD_INIT();
 1ec:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_INIT>
	UART_INIT();
 1f0:	0e 94 10 01 	call	0x220	; 0x220 <UART_INIT>
	LCD_GOTO_XY(0,0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_GOTO_XY>
	LCD_WRITE_CHAR('A');
 1fc:	81 e4       	ldi	r24, 0x41	; 65
 1fe:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_WRITE_CHAR>
	UART_SEND_BYTE('A');
 202:	81 e4       	ldi	r24, 0x41	; 65
 204:	0e 94 1c 01 	call	0x238	; 0x238 <UART_SEND_BYTE>
	UART_SEND_BYTE('b');
 208:	82 e6       	ldi	r24, 0x62	; 98
 20a:	0e 94 1c 01 	call	0x238	; 0x238 <UART_SEND_BYTE>
    while (1) 
    {
		LCD_GOTO_XY(1,0);
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 df 00 	call	0x1be	; 0x1be <LCD_GOTO_XY>
		Received_data=UART_RECIVE_BYTE();
 216:	0e 94 20 01 	call	0x240	; 0x240 <UART_RECIVE_BYTE>
		LCD_WRITE_CHAR(Received_data);
 21a:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_WRITE_CHAR>
 21e:	f7 cf       	rjmp	.-18     	; 0x20e <main+0x22>

00000220 <UART_INIT>:
#include "../SERVICES/Bit_Configuration.h"

void UART_INIT(void)
{
	// Error .2% with Baud rate  9600
	UBRRL=51;
 220:	83 e3       	ldi	r24, 0x33	; 51
 222:	89 b9       	out	0x09, r24	; 9
	// normal speed  divided by 16 
	CLEARBIT(UCSRA,U2X);   // by default equal 0
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	8d 7f       	andi	r24, 0xFD	; 253
 228:	8b b9       	out	0x0b, r24	; 11
	//SETBIT(UCSRC,UCSZ1); // by default equal 1
	//CLEARBIT(UCSRB,UCSZ2); // by default equal 0
	
	/*===============Enable================*/
	//Enable Transmit
	SETBIT(UCSRB,TXEN);
 22a:	8a b1       	in	r24, 0x0a	; 10
 22c:	88 60       	ori	r24, 0x08	; 8
 22e:	8a b9       	out	0x0a, r24	; 10
	// Enable Receive
	SETBIT(UCSRB,RXEN);
 230:	8a b1       	in	r24, 0x0a	; 10
 232:	80 61       	ori	r24, 0x10	; 16
 234:	8a b9       	out	0x0a, r24	; 10
 236:	08 95       	ret

00000238 <UART_SEND_BYTE>:
	 
	
}
void UART_SEND_BYTE(uint8_t data)
{
	while (READBIT(UCSRA,UDRE)==0); // check if the buffer is empty or not 
 238:	5d 9b       	sbis	0x0b, 5	; 11
 23a:	fe cf       	rjmp	.-4      	; 0x238 <UART_SEND_BYTE>
	UDR=data;
 23c:	8c b9       	out	0x0c, r24	; 12
 23e:	08 95       	ret

00000240 <UART_RECIVE_BYTE>:
	
}
uint8_t UART_RECIVE_BYTE(void)
{
	while(READBIT(UCSRA,RXC)==0);
 240:	5f 9b       	sbis	0x0b, 7	; 11
 242:	fe cf       	rjmp	.-4      	; 0x240 <UART_RECIVE_BYTE>
	//uint8_t data=UDR;
	return UDR;
 244:	8c b1       	in	r24, 0x0c	; 12
	
 246:	08 95       	ret

00000248 <_exit>:
 248:	f8 94       	cli

0000024a <__stop_program>:
 24a:	ff cf       	rjmp	.-2      	; 0x24a <__stop_program>
