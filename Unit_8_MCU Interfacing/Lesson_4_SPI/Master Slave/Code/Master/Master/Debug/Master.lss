
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000118  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000148  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000658  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005be  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029d  00000000  00000000  00000dca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000370  00000000  00000000  000010ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000091  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <MASTER_INIT>:
#define Data_PORT       PORTA

void MASTER_INIT(void)
{
	// Set SS , MOSI , SCL as output
	M_S_Control |=(1<<SS) | (1<<MOSI) |(1<<SCK) ;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	// Set MISO as input
	M_S_Control &=~(1<<MISO);
  72:	87 b3       	in	r24, 0x17	; 23
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	87 bb       	out	0x17, r24	; 23
	
	SPCR |=1<<SPE;    // Enable SPI
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8d b9       	out	0x0d, r24	; 13
	SPCR |=1<<MSTR;   // Enable Master
  7e:	8d b1       	in	r24, 0x0d	; 13
  80:	80 61       	ori	r24, 0x10	; 16
  82:	8d b9       	out	0x0d, r24	; 13
	SPCR |=1<<SPR0;   // Set clock rate focs/16	
  84:	8d b1       	in	r24, 0x0d	; 13
  86:	81 60       	ori	r24, 0x01	; 1
  88:	8d b9       	out	0x0d, r24	; 13
  8a:	08 95       	ret

0000008c <SPI_MasterTransmit>:
}

uint8_t SPI_MasterTransmit(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
  8c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <SPI_MasterTransmit+0x2>
	return SPDR;
  92:	8f b1       	in	r24, 0x0f	; 15
}
  94:	08 95       	ret

00000096 <main>:


int main(void)
{
	// Set PORTA as an output
	Data_CTRL =0xFF;
  96:	8f ef       	ldi	r24, 0xFF	; 255
  98:	8a bb       	out	0x1a, r24	; 26
	MASTER_INIT();
  9a:	0e 94 36 00 	call	0x6c	; 0x6c <MASTER_INIT>
	uint8_t counter=0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e3       	ldi	r18, 0x3F	; 63
  a2:	3d e0       	ldi	r19, 0x0D	; 13
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	30 40       	sbci	r19, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x10>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x1a>
  b0:	00 00       	nop
    while (counter<=255) 
    {
		_delay_ms(1000);
		PORTA=SPI_MasterTransmit(counter++);
  b2:	c1 e0       	ldi	r28, 0x01	; 1
  b4:	c8 0f       	add	r28, r24
  b6:	0e 94 46 00 	call	0x8c	; 0x8c <SPI_MasterTransmit>
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	8c 2f       	mov	r24, r28
  be:	f0 cf       	rjmp	.-32     	; 0xa0 <main+0xa>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
