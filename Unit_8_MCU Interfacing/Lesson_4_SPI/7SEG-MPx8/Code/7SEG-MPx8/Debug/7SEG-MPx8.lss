
7SEG-MPx8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000180  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fc  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f8  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ec  00000000  00000000  00000ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001228  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000075  00000000  00000000  000015b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <SPI_MasterInit>:


void SPI_MasterInit(void)
{
	// Set SS , MOSI , SCL as output
	Master_Control |=(1<<MOSI)|(1<<Chip_select) |(1<<CLK) ;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 6b       	ori	r24, 0xB0	; 176
  70:	87 bb       	out	0x17, r24	; 23
	// Set MISO as input
	
	SPCR |=1<<MSTR;   // Enable Master
  72:	8d b1       	in	r24, 0x0d	; 13
  74:	80 61       	ori	r24, 0x10	; 16
  76:	8d b9       	out	0x0d, r24	; 13
	SPCR |=1<<SPE;    // Enable SPI
  78:	8d b1       	in	r24, 0x0d	; 13
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	8d b9       	out	0x0d, r24	; 13
	SPCR |=1<<SPR0;   // Set clock rate focs/16
  7e:	8d b1       	in	r24, 0x0d	; 13
  80:	81 60       	ori	r24, 0x01	; 1
  82:	8d b9       	out	0x0d, r24	; 13
  84:	08 95       	ret

00000086 <execute>:

void execute(uint8_t CMD,uint8_t Data)
{
	//In MAX7221, data packets are 16 bits long (two bytes)
	//You should first make CS low before transmitting
	PORTB &=~(1<<Chip_select);
  86:	98 b3       	in	r25, 0x18	; 24
  88:	9f 7e       	andi	r25, 0xEF	; 239
  8a:	98 bb       	out	0x18, r25	; 24
	//then you transmit two bytes of data
	// transmit command
	SPDR=CMD;
  8c:	8f b9       	out	0x0f, r24	; 15
	// wait to complete the transmission
	while (!(SPSR & (1 << SPIF)));
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <execute+0x8>
	// transmit data
	SPDR =Data;
  92:	6f b9       	out	0x0f, r22	; 15
	// wait to complete the transmission
	while (!(SPSR & (1 << SPIF)));
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <execute+0xe>
	//terminate the transmission by making CS high.
	PORTB |=(1<<Chip_select);
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	80 61       	ori	r24, 0x10	; 16
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	08 95       	ret

000000a0 <MAX7221_init>:
}

void MAX7221_init(void)
{
	execute(0x09,0xFF);   // decode all display    
  a0:	6f ef       	ldi	r22, 0xFF	; 255
  a2:	89 e0       	ldi	r24, 0x09	; 9
  a4:	0e 94 43 00 	call	0x86	; 0x86 <execute>
	execute(0x0A,0xFF);   // max intensity
  a8:	6f ef       	ldi	r22, 0xFF	; 255
  aa:	8a e0       	ldi	r24, 0x0A	; 10
  ac:	0e 94 43 00 	call	0x86	; 0x86 <execute>
	execute(0x0B,0xF7);   // set scan limit (digit0 to digit7)  on the screen  doing the all segments work 
  b0:	67 ef       	ldi	r22, 0xF7	; 247
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	0e 94 43 00 	call	0x86	; 0x86 <execute>
	execute(0x0C,0x01);   // turn on display normal mood
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	8c e0       	ldi	r24, 0x0C	; 12
  bc:	0e 94 43 00 	call	0x86	; 0x86 <execute>
  c0:	08 95       	ret

000000c2 <main>:
}
int main(void)
{
	SPI_MasterInit();
  c2:	0e 94 36 00 	call	0x6c	; 0x6c <SPI_MasterInit>
	MAX7221_init();
  c6:	0e 94 50 00 	call	0xa0	; 0xa0 <MAX7221_init>
	uint8_t counter=0;
  ca:	60 e0       	ldi	r22, 0x00	; 0
	uint8_t index_display;
    while (1) 
    {
		for(index_display=1;index_display<9;index_display++)
  cc:	c1 e0       	ldi	r28, 0x01	; 1
  ce:	07 c0       	rjmp	.+14     	; 0xde <main+0x1c>
			execute(index_display,counter++); // write on Led (index_display) value (counter)
  d0:	d1 e0       	ldi	r29, 0x01	; 1
  d2:	d6 0f       	add	r29, r22
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 43 00 	call	0x86	; 0x86 <execute>
	MAX7221_init();
	uint8_t counter=0;
	uint8_t index_display;
    while (1) 
    {
		for(index_display=1;index_display<9;index_display++)
  da:	cf 5f       	subi	r28, 0xFF	; 255
			execute(index_display,counter++); // write on Led (index_display) value (counter)
  dc:	6d 2f       	mov	r22, r29
	MAX7221_init();
	uint8_t counter=0;
	uint8_t index_display;
    while (1) 
    {
		for(index_display=1;index_display<9;index_display++)
  de:	c9 30       	cpi	r28, 0x09	; 9
  e0:	b8 f3       	brcs	.-18     	; 0xd0 <main+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f e3       	ldi	r18, 0x3F	; 63
  e4:	8d e0       	ldi	r24, 0x0D	; 13
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x26>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x30>
  f2:	00 00       	nop
  f4:	eb cf       	rjmp	.-42     	; 0xcc <main+0xa>

000000f6 <_exit>:
  f6:	f8 94       	cli

000000f8 <__stop_program>:
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <__stop_program>
