
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000934  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a64  08000a64  00010a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a7c  08000a7c  00010a84  2**0
                  CONTENTS
  4 .ARM          00000000  08000a7c  08000a7c  00010a84  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a7c  08000a84  00010a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a7c  08000a7c  00010a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a80  08000a80  00010a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08000a84  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000a84  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a84  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004086  00000000  00000000  00010aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009a2  00000000  00000000  00014b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a48  00000000  00000000  000154d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00015f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000160f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000db0  00000000  00000000  00016268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000247d  00000000  00000000  00017018  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000b16e  00000000  00000000  00019495  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024603  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000058c  00000000  00000000  00024680  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000a4c 	.word	0x08000a4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000a4c 	.word	0x08000a4c

08000170 <EXTI0_IRQHandler>:

// ================================================================
// IRQ Functions
//=================================================================
void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//clear by writing 1 into the bit Pending register EXTRI_PR
	EXTRI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000020 	.word	0x20000020

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTRI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000020 	.word	0x20000020

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTRI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000020 	.word	0x20000020

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//clear by writing 1 into the bit Pending register EXTRI_PR
	EXTRI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}void EXT4_IRQHandler(void)
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000020 	.word	0x20000020

08000200 <EXTI9_5_IRQHandler>:
	EXTRI->PR |= (1<<4);
	// call IRQ callBack
	GP_IRQ_CallBack[4]();
}
void EXTI9_5_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	// Check the EXTRI line number
	//clear by writing 1 into the bit Pending register EXTRI_PR
	// Call IRQ callBack
	if(EXTRI->PR & 1<<5) {EXTRI->PR |= (1<<5); 		GP_IRQ_CallBack[5]();}
 8000204:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	f003 0320 	and.w	r3, r3, #32
 800020c:	2b00      	cmp	r3, #0
 800020e:	d008      	beq.n	8000222 <EXTI9_5_IRQHandler+0x22>
 8000210:	4b23      	ldr	r3, [pc, #140]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	4a22      	ldr	r2, [pc, #136]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000216:	f043 0320 	orr.w	r3, r3, #32
 800021a:	6153      	str	r3, [r2, #20]
 800021c:	4b21      	ldr	r3, [pc, #132]	; (80002a4 <EXTI9_5_IRQHandler+0xa4>)
 800021e:	695b      	ldr	r3, [r3, #20]
 8000220:	4798      	blx	r3
	if(EXTRI->PR & 1<<6) {EXTRI->PR |= (1<<6); 		GP_IRQ_CallBack[6]();}
 8000222:	4b1f      	ldr	r3, [pc, #124]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000224:	695b      	ldr	r3, [r3, #20]
 8000226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800022a:	2b00      	cmp	r3, #0
 800022c:	d008      	beq.n	8000240 <EXTI9_5_IRQHandler+0x40>
 800022e:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	4a1b      	ldr	r2, [pc, #108]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000238:	6153      	str	r3, [r2, #20]
 800023a:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <EXTI9_5_IRQHandler+0xa4>)
 800023c:	699b      	ldr	r3, [r3, #24]
 800023e:	4798      	blx	r3
	if(EXTRI->PR & 1<<7) {EXTRI->PR |= (1<<7); 		GP_IRQ_CallBack[7]();}
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000248:	2b00      	cmp	r3, #0
 800024a:	d008      	beq.n	800025e <EXTI9_5_IRQHandler+0x5e>
 800024c:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a13      	ldr	r2, [pc, #76]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000256:	6153      	str	r3, [r2, #20]
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <EXTI9_5_IRQHandler+0xa4>)
 800025a:	69db      	ldr	r3, [r3, #28]
 800025c:	4798      	blx	r3
	if(EXTRI->PR & 1<<8) {EXTRI->PR |= (1<<8); 		GP_IRQ_CallBack[8]();}
 800025e:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000260:	695b      	ldr	r3, [r3, #20]
 8000262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000266:	2b00      	cmp	r3, #0
 8000268:	d008      	beq.n	800027c <EXTI9_5_IRQHandler+0x7c>
 800026a:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	695b      	ldr	r3, [r3, #20]
 800026e:	4a0c      	ldr	r2, [pc, #48]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 8000270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000274:	6153      	str	r3, [r2, #20]
 8000276:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <EXTI9_5_IRQHandler+0xa4>)
 8000278:	6a1b      	ldr	r3, [r3, #32]
 800027a:	4798      	blx	r3
	if(EXTRI->PR & 1<<9) {EXTRI->PR |= (1<<9); 		GP_IRQ_CallBack[9]();}
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000284:	2b00      	cmp	r3, #0
 8000286:	d008      	beq.n	800029a <EXTI9_5_IRQHandler+0x9a>
 8000288:	4b05      	ldr	r3, [pc, #20]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	695b      	ldr	r3, [r3, #20]
 800028c:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <EXTI9_5_IRQHandler+0xa0>)
 800028e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000292:	6153      	str	r3, [r2, #20]
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <EXTI9_5_IRQHandler+0xa4>)
 8000296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000298:	4798      	blx	r3
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40010400 	.word	0x40010400
 80002a4:	20000020 	.word	0x20000020

080002a8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	// Check the EXTRI line number
	//clear by writing 1 into the bit Pending register EXTRI_PR
	// Call IRQ callBack
	if(EXTRI->PR & 1<<10) {EXTRI->PR |= (1<<10);    GP_IRQ_CallBack[10]();}
 80002ac:	4b2d      	ldr	r3, [pc, #180]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d008      	beq.n	80002ca <EXTI15_10_IRQHandler+0x22>
 80002b8:	4b2a      	ldr	r3, [pc, #168]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	4a29      	ldr	r2, [pc, #164]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002c2:	6153      	str	r3, [r2, #20]
 80002c4:	4b28      	ldr	r3, [pc, #160]	; (8000368 <EXTI15_10_IRQHandler+0xc0>)
 80002c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002c8:	4798      	blx	r3
	if(EXTRI->PR & 1<<11) {EXTRI->PR |= (1<<11);    GP_IRQ_CallBack[11]();}
 80002ca:	4b26      	ldr	r3, [pc, #152]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002cc:	695b      	ldr	r3, [r3, #20]
 80002ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d008      	beq.n	80002e8 <EXTI15_10_IRQHandler+0x40>
 80002d6:	4b23      	ldr	r3, [pc, #140]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a22      	ldr	r2, [pc, #136]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002e0:	6153      	str	r3, [r2, #20]
 80002e2:	4b21      	ldr	r3, [pc, #132]	; (8000368 <EXTI15_10_IRQHandler+0xc0>)
 80002e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002e6:	4798      	blx	r3
	if(EXTRI->PR & 1<<12) {EXTRI->PR |= (1<<12);    GP_IRQ_CallBack[12]();}
 80002e8:	4b1e      	ldr	r3, [pc, #120]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d008      	beq.n	8000306 <EXTI15_10_IRQHandler+0x5e>
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a1a      	ldr	r2, [pc, #104]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 80002fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002fe:	6153      	str	r3, [r2, #20]
 8000300:	4b19      	ldr	r3, [pc, #100]	; (8000368 <EXTI15_10_IRQHandler+0xc0>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4798      	blx	r3
	if(EXTRI->PR & 1<<13) {EXTRI->PR |= (1<<13); 	GP_IRQ_CallBack[13]();}
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800030e:	2b00      	cmp	r3, #0
 8000310:	d008      	beq.n	8000324 <EXTI15_10_IRQHandler+0x7c>
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000318:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031c:	6153      	str	r3, [r2, #20]
 800031e:	4b12      	ldr	r3, [pc, #72]	; (8000368 <EXTI15_10_IRQHandler+0xc0>)
 8000320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000322:	4798      	blx	r3
	if(EXTRI->PR & 1<<14) {EXTRI->PR |= (1<<14); 	GP_IRQ_CallBack[14]();}
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000326:	695b      	ldr	r3, [r3, #20]
 8000328:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d008      	beq.n	8000342 <EXTI15_10_IRQHandler+0x9a>
 8000330:	4b0c      	ldr	r3, [pc, #48]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000336:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033a:	6153      	str	r3, [r2, #20]
 800033c:	4b0a      	ldr	r3, [pc, #40]	; (8000368 <EXTI15_10_IRQHandler+0xc0>)
 800033e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000340:	4798      	blx	r3
	if(EXTRI->PR & 1<<15) {EXTRI->PR |= (1<<15); 	GP_IRQ_CallBack[15]();}
 8000342:	4b08      	ldr	r3, [pc, #32]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000344:	695b      	ldr	r3, [r3, #20]
 8000346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800034a:	2b00      	cmp	r3, #0
 800034c:	d008      	beq.n	8000360 <EXTI15_10_IRQHandler+0xb8>
 800034e:	4b05      	ldr	r3, [pc, #20]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000350:	695b      	ldr	r3, [r3, #20]
 8000352:	4a04      	ldr	r2, [pc, #16]	; (8000364 <EXTI15_10_IRQHandler+0xbc>)
 8000354:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000358:	6153      	str	r3, [r2, #20]
 800035a:	4b03      	ldr	r3, [pc, #12]	; (8000368 <EXTI15_10_IRQHandler+0xc0>)
 800035c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800035e:	4798      	blx	r3
}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40010400 	.word	0x40010400
 8000368:	20000020 	.word	0x20000020

0800036c <Get_CRLH_position>:
 *      Author: Abotaleb
 */

#include "../MCAL/Inc/STM32F103C6_GPIO_Driver.h"
uint8_t Get_CRLH_position (uint16_t pinNumber)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	4603      	mov	r3, r0
 8000374:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000376:	88fb      	ldrh	r3, [r7, #6]
 8000378:	2b80      	cmp	r3, #128	; 0x80
 800037a:	d042      	beq.n	8000402 <Get_CRLH_position+0x96>
 800037c:	2b80      	cmp	r3, #128	; 0x80
 800037e:	dc11      	bgt.n	80003a4 <Get_CRLH_position+0x38>
 8000380:	2b08      	cmp	r3, #8
 8000382:	d036      	beq.n	80003f2 <Get_CRLH_position+0x86>
 8000384:	2b08      	cmp	r3, #8
 8000386:	dc06      	bgt.n	8000396 <Get_CRLH_position+0x2a>
 8000388:	2b02      	cmp	r3, #2
 800038a:	d02e      	beq.n	80003ea <Get_CRLH_position+0x7e>
 800038c:	2b04      	cmp	r3, #4
 800038e:	d02e      	beq.n	80003ee <Get_CRLH_position+0x82>
 8000390:	2b01      	cmp	r3, #1
 8000392:	d028      	beq.n	80003e6 <Get_CRLH_position+0x7a>
 8000394:	e047      	b.n	8000426 <Get_CRLH_position+0xba>
 8000396:	2b20      	cmp	r3, #32
 8000398:	d02f      	beq.n	80003fa <Get_CRLH_position+0x8e>
 800039a:	2b40      	cmp	r3, #64	; 0x40
 800039c:	d02f      	beq.n	80003fe <Get_CRLH_position+0x92>
 800039e:	2b10      	cmp	r3, #16
 80003a0:	d029      	beq.n	80003f6 <Get_CRLH_position+0x8a>
 80003a2:	e040      	b.n	8000426 <Get_CRLH_position+0xba>
 80003a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003a8:	d033      	beq.n	8000412 <Get_CRLH_position+0xa6>
 80003aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003ae:	dc09      	bgt.n	80003c4 <Get_CRLH_position+0x58>
 80003b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003b4:	d029      	beq.n	800040a <Get_CRLH_position+0x9e>
 80003b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003ba:	d028      	beq.n	800040e <Get_CRLH_position+0xa2>
 80003bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c0:	d021      	beq.n	8000406 <Get_CRLH_position+0x9a>
 80003c2:	e030      	b.n	8000426 <Get_CRLH_position+0xba>
 80003c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003c8:	d027      	beq.n	800041a <Get_CRLH_position+0xae>
 80003ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ce:	dc03      	bgt.n	80003d8 <Get_CRLH_position+0x6c>
 80003d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003d4:	d01f      	beq.n	8000416 <Get_CRLH_position+0xaa>
 80003d6:	e026      	b.n	8000426 <Get_CRLH_position+0xba>
 80003d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003dc:	d01f      	beq.n	800041e <Get_CRLH_position+0xb2>
 80003de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003e2:	d01e      	beq.n	8000422 <Get_CRLH_position+0xb6>
 80003e4:	e01f      	b.n	8000426 <Get_CRLH_position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 80003e6:	2300      	movs	r3, #0
 80003e8:	e01e      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 80003ea:	2304      	movs	r3, #4
 80003ec:	e01c      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 80003ee:	2308      	movs	r3, #8
 80003f0:	e01a      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 80003f2:	230c      	movs	r3, #12
 80003f4:	e018      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 80003f6:	2310      	movs	r3, #16
 80003f8:	e016      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 80003fa:	2314      	movs	r3, #20
 80003fc:	e014      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 80003fe:	2318      	movs	r3, #24
 8000400:	e012      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000402:	231c      	movs	r3, #28
 8000404:	e010      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000406:	2300      	movs	r3, #0
 8000408:	e00e      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800040a:	2304      	movs	r3, #4
 800040c:	e00c      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800040e:	2308      	movs	r3, #8
 8000410:	e00a      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000412:	230c      	movs	r3, #12
 8000414:	e008      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000416:	2310      	movs	r3, #16
 8000418:	e006      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800041a:	2314      	movs	r3, #20
 800041c:	e004      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800041e:	2318      	movs	r3, #24
 8000420:	e002      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000422:	231c      	movs	r3, #28
 8000424:	e000      	b.n	8000428 <Get_CRLH_position+0xbc>
		break;
	}
	return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <MCAL_GPIO_INIT>:
 * @retval	  - none
 * Note		  - stm32f103c6 MCU has GPIOz [z one of A ,B , C ,D ,E]
 * 			   but LQFP48 Package has only GPIOA , GPIOB and Partial of GPIOC , GPIOD
================================================================**/
void MCAL_GPIO_INIT(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000432:	b590      	push	{r4, r7, lr}
 8000434:	b085      	sub	sp, #20
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) pin 0 to 7
	//Port configuration register High (GPIOx_CRL) (x=A..G) pin 8 to 15
	volatile uint32_t *ConfigRegister = NULL;
 800043c:	2300      	movs	r3, #0
 800043e:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;
 8000440:	2300      	movs	r3, #0
 8000442:	73fb      	strb	r3, [r7, #15]
	// check for set the pointer to CRL or CRH
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	2bff      	cmp	r3, #255	; 0xff
 800044a:	d801      	bhi.n	8000450 <MCAL_GPIO_INIT+0x1e>
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	e001      	b.n	8000454 <MCAL_GPIO_INIT+0x22>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	3304      	adds	r3, #4
 8000454:	60bb      	str	r3, [r7, #8]
	// clear CNF[1:0] MODE[1:0]
	(*ConfigRegister) &= ~(0xF<<Get_CRLH_position(PinConfig->GPIO_PinNumber));
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	4618      	mov	r0, r3
 800045c:	f7ff ff86 	bl	800036c <Get_CRLH_position>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	230f      	movs	r3, #15
 8000466:	4093      	lsls	r3, r2
 8000468:	43da      	mvns	r2, r3
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	401a      	ands	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	601a      	str	r2, [r3, #0]
	// if pin is output ?
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)
 8000474:	683b      	ldr	r3, [r7, #0]
 8000476:	789b      	ldrb	r3, [r3, #2]
 8000478:	2b04      	cmp	r3, #4
 800047a:	d00b      	beq.n	8000494 <MCAL_GPIO_INIT+0x62>
 800047c:	683b      	ldr	r3, [r7, #0]
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	2b05      	cmp	r3, #5
 8000482:	d007      	beq.n	8000494 <MCAL_GPIO_INIT+0x62>
			||(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_OUTPUT_PP) ||(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_OUTPUT_OD))
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	789b      	ldrb	r3, [r3, #2]
 8000488:	2b06      	cmp	r3, #6
 800048a:	d003      	beq.n	8000494 <MCAL_GPIO_INIT+0x62>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	789b      	ldrb	r3, [r3, #2]
 8000490:	2b07      	cmp	r3, #7
 8000492:	d10e      	bne.n	80004b2 <MCAL_GPIO_INIT+0x80>
	{
		// set CNFx[1:0] MODE[1:0]
		Pin_Config = ( (((PinConfig->GPIO_MODE -4 )<<2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	789b      	ldrb	r3, [r3, #2]
 8000498:	3b04      	subs	r3, #4
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	b25a      	sxtb	r2, r3
 800049e:	683b      	ldr	r3, [r7, #0]
 80004a0:	78db      	ldrb	r3, [r3, #3]
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	4313      	orrs	r3, r2
 80004a6:	b25b      	sxtb	r3, r3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	73fb      	strb	r3, [r7, #15]
 80004b0:	e02c      	b.n	800050c <MCAL_GPIO_INIT+0xda>
	}
	else // if pin is input
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) ||(PinConfig->GPIO_MODE == GPIO_MODE_FLOATINg_INPUT))
 80004b2:	683b      	ldr	r3, [r7, #0]
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d003      	beq.n	80004c2 <MCAL_GPIO_INIT+0x90>
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	789b      	ldrb	r3, [r3, #2]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d107      	bne.n	80004d2 <MCAL_GPIO_INIT+0xa0>
		{
			Pin_Config = ( (((PinConfig->GPIO_MODE )<<2) | 0x0) & 0x0F);
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	789b      	ldrb	r3, [r3, #2]
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	f003 030f 	and.w	r3, r3, #15
 80004ce:	73fb      	strb	r3, [r7, #15]
 80004d0:	e01c      	b.n	800050c <MCAL_GPIO_INIT+0xda>
		}
		else if	(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_INPUT ) // consider it as input floating
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	789b      	ldrb	r3, [r3, #2]
 80004d6:	2b08      	cmp	r3, #8
 80004d8:	d102      	bne.n	80004e0 <MCAL_GPIO_INIT+0xae>
		{
			Pin_Config = ( (((GPIO_MODE_FLOATINg_INPUT)<<2) | 0x0) & 0x0F);
 80004da:	2304      	movs	r3, #4
 80004dc:	73fb      	strb	r3, [r7, #15]
 80004de:	e015      	b.n	800050c <MCAL_GPIO_INIT+0xda>

		}
		else // pull up / pull down input
		{
			Pin_Config = ( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0x0F);
 80004e0:	2308      	movs	r3, #8
 80004e2:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80004e4:	683b      	ldr	r3, [r7, #0]
 80004e6:	789b      	ldrb	r3, [r3, #2]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d107      	bne.n	80004fc <MCAL_GPIO_INIT+0xca>
			{
				//	Table 20. Port bit configuration table Px ODR register = 1 --> pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	683a      	ldr	r2, [r7, #0]
 80004f2:	8812      	ldrh	r2, [r2, #0]
 80004f4:	431a      	orrs	r2, r3
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	e007      	b.n	800050c <MCAL_GPIO_INIT+0xda>

			}
			else // GPIO_MODE_INPUT_PD
			{
				//	Table 20. Port bit configuration table Px ODR register = 0 --> pull down
				GPIOx->ODR &=~(PinConfig->GPIO_PinNumber);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	8812      	ldrh	r2, [r2, #0]
 8000504:	43d2      	mvns	r2, r2
 8000506:	401a      	ands	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*ConfigRegister) |= Pin_Config <<Get_CRLH_position(PinConfig->GPIO_PinNumber);
 800050c:	7bfc      	ldrb	r4, [r7, #15]
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	881b      	ldrh	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff2a 	bl	800036c <Get_CRLH_position>
 8000518:	4603      	mov	r3, r0
 800051a:	fa04 f203 	lsl.w	r2, r4, r3
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	431a      	orrs	r2, r3
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	601a      	str	r2, [r3, #0]
}
 8000528:	bf00      	nop
 800052a:	3714      	adds	r7, #20
 800052c:	46bd      	mov	sp, r7
 800052e:	bd90      	pop	{r4, r7, pc}

08000530 <MCAL_RCC_GET_SysClockFreq>:
1110: SYSCLK divided by 256
1111: SYSCLK divided by 512*/
const uint8_t AHB_prescaler[16U]={0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GET_SysClockFreq(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
00: HSI oscillator used as system clock
01: HSE oscillator used as system clock
10: PLL used as system clock
11: not applicable*/

	switch( (RCC->CFGR >> 2) & 0b11)
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MCAL_RCC_GET_SysClockFreq+0x30>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	089b      	lsrs	r3, r3, #2
 800053a:	f003 0303 	and.w	r3, r3, #3
 800053e:	2b01      	cmp	r3, #1
 8000540:	d006      	beq.n	8000550 <MCAL_RCC_GET_SysClockFreq+0x20>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d302      	bcc.n	800054c <MCAL_RCC_GET_SysClockFreq+0x1c>
 8000546:	2b02      	cmp	r3, #2
 8000548:	d004      	beq.n	8000554 <MCAL_RCC_GET_SysClockFreq+0x24>
 800054a:	e005      	b.n	8000558 <MCAL_RCC_GET_SysClockFreq+0x28>
	{
	case 0:
		return HSI_RCC_Clock;
 800054c:	4b05      	ldr	r3, [pc, #20]	; (8000564 <MCAL_RCC_GET_SysClockFreq+0x34>)
 800054e:	e003      	b.n	8000558 <MCAL_RCC_GET_SysClockFreq+0x28>
		break;
	case 1:
		return HSE_RCC_Clock;
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <MCAL_RCC_GET_SysClockFreq+0x38>)
 8000552:	e001      	b.n	8000558 <MCAL_RCC_GET_SysClockFreq+0x28>
		break;
	case 2:
		return 16000000;
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <MCAL_RCC_GET_SysClockFreq+0x38>)
 8000556:	e7ff      	b.n	8000558 <MCAL_RCC_GET_SysClockFreq+0x28>
		break;

	}


}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr
 8000560:	40021000 	.word	0x40021000
 8000564:	007a1200 	.word	0x007a1200
 8000568:	00f42400 	.word	0x00f42400

0800056c <MCAL_RCC_GET_HCLKFreq>:
uint32_t MCAL_RCC_GET_HCLKFreq(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GET_SysClockFreq()>>AHB_prescaler[(RCC->CFGR >> 4) & 0b1111]);
 8000570:	f7ff ffde 	bl	8000530 <MCAL_RCC_GET_SysClockFreq>
 8000574:	4601      	mov	r1, r0
 8000576:	4b05      	ldr	r3, [pc, #20]	; (800058c <MCAL_RCC_GET_HCLKFreq+0x20>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	091b      	lsrs	r3, r3, #4
 800057c:	f003 030f 	and.w	r3, r3, #15
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <MCAL_RCC_GET_HCLKFreq+0x24>)
 8000582:	5cd3      	ldrb	r3, [r2, r3]
 8000584:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000588:	4618      	mov	r0, r3
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40021000 	.word	0x40021000
 8000590:	08000a6c 	.word	0x08000a6c

08000594 <MCAL_RCC_GET_PCLK1Freq>:
uint32_t MCAL_RCC_GET_PCLK1Freq(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GET_HCLKFreq()>>APB_prescaler[(RCC->CFGR >> 8 ) & 0b111]); // divided by 2,4,8,16 according to the index of array
 8000598:	f7ff ffe8 	bl	800056c <MCAL_RCC_GET_HCLKFreq>
 800059c:	4601      	mov	r1, r0
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <MCAL_RCC_GET_PCLK1Freq+0x20>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	0a1b      	lsrs	r3, r3, #8
 80005a4:	f003 0307 	and.w	r3, r3, #7
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <MCAL_RCC_GET_PCLK1Freq+0x24>)
 80005aa:	5cd3      	ldrb	r3, [r2, r3]
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40021000 	.word	0x40021000
 80005b8:	08000a64 	.word	0x08000a64

080005bc <MCAL_RCC_GET_PCLK2Freq>:
uint32_t MCAL_RCC_GET_PCLK2Freq(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GET_HCLKFreq()>>APB_prescaler[(RCC->CFGR >> 11 ) & 0b111]);
 80005c0:	f7ff ffd4 	bl	800056c <MCAL_RCC_GET_HCLKFreq>
 80005c4:	4601      	mov	r1, r0
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <MCAL_RCC_GET_PCLK2Freq+0x20>)
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	0adb      	lsrs	r3, r3, #11
 80005cc:	f003 0307 	and.w	r3, r3, #7
 80005d0:	4a03      	ldr	r2, [pc, #12]	; (80005e0 <MCAL_RCC_GET_PCLK2Freq+0x24>)
 80005d2:	5cd3      	ldrb	r3, [r2, r3]
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40021000 	.word	0x40021000
 80005e0:	08000a64 	.word	0x08000a64

080005e4 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration
 * @retval 			- none
 * Note				- Support for Now Asynchronous mode & Clock 8 MHZ S
======================================================================**/
void MCAL_UART_Init(USART_TypeDef *USARTx,UART_Config *UART_Config)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 80005ee:	4a57      	ldr	r2, [pc, #348]	; (800074c <MCAL_UART_Init+0x168>)
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	6013      	str	r3, [r2, #0]
	uint32_t pclk,BRR;
	// Enable the clock
	if		(USARTx==USART1)  		 {RCC_USART1_CLK_EN();}
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a56      	ldr	r2, [pc, #344]	; (8000750 <MCAL_UART_Init+0x16c>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <MCAL_UART_Init+0x26>
 80005fc:	4b55      	ldr	r3, [pc, #340]	; (8000754 <MCAL_UART_Init+0x170>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a54      	ldr	r2, [pc, #336]	; (8000754 <MCAL_UART_Init+0x170>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	e014      	b.n	8000634 <MCAL_UART_Init+0x50>
	else if (USARTx==USART2)		 {RCC_USART2_CLK_EN();}
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a52      	ldr	r2, [pc, #328]	; (8000758 <MCAL_UART_Init+0x174>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d106      	bne.n	8000620 <MCAL_UART_Init+0x3c>
 8000612:	4b50      	ldr	r3, [pc, #320]	; (8000754 <MCAL_UART_Init+0x170>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a4f      	ldr	r2, [pc, #316]	; (8000754 <MCAL_UART_Init+0x170>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	e009      	b.n	8000634 <MCAL_UART_Init+0x50>
	else if (USARTx==USART3)		 {RCC_USART3_CLK_EN();}
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a4e      	ldr	r2, [pc, #312]	; (800075c <MCAL_UART_Init+0x178>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d105      	bne.n	8000634 <MCAL_UART_Init+0x50>
 8000628:	4b4a      	ldr	r3, [pc, #296]	; (8000754 <MCAL_UART_Init+0x170>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	4a49      	ldr	r2, [pc, #292]	; (8000754 <MCAL_UART_Init+0x170>)
 800062e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000632:	61d3      	str	r3, [r2, #28]
	// Enable the USART by writing the UE bit in USART_CR1 register to 1
	USARTx->CR1 |=1<<13;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	60da      	str	r2, [r3, #12]
	// select the mode
	USARTx->CR1 |=UART_Config->USART_Mode;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	683a      	ldr	r2, [r7, #0]
 8000646:	7812      	ldrb	r2, [r2, #0]
 8000648:	431a      	orrs	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60da      	str	r2, [r3, #12]
	// Program the M bit in USART_CR1 to define the word length.
	USARTx->CR1 |=UART_Config->PayLoad_Length;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	683a      	ldr	r2, [r7, #0]
 8000654:	7a12      	ldrb	r2, [r2, #8]
 8000656:	431a      	orrs	r2, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	60da      	str	r2, [r3, #12]
	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->parity ;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	683a      	ldr	r2, [r7, #0]
 8000662:	7a52      	ldrb	r2, [r2, #9]
 8000664:	431a      	orrs	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
	//Program the number of stop bits in USART_CR2.
	USARTx->CR2 |=UART_Config->stopBits;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	7a92      	ldrb	r2, [r2, #10]
 8000672:	431a      	orrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	611a      	str	r2, [r3, #16]
	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HWFlowCtrl ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	7ad2      	ldrb	r2, [r2, #11]
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	615a      	str	r2, [r3, #20]
	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if(USARTx==USART1)  	{pclk=MCAL_RCC_GET_PCLK2Freq();}
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a31      	ldr	r2, [pc, #196]	; (8000750 <MCAL_UART_Init+0x16c>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d103      	bne.n	8000696 <MCAL_UART_Init+0xb2>
 800068e:	f7ff ff95 	bl	80005bc <MCAL_RCC_GET_PCLK2Freq>
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	e002      	b.n	800069c <MCAL_UART_Init+0xb8>
	else 				    {pclk=MCAL_RCC_GET_PCLK1Freq();}
 8000696:	f7ff ff7d 	bl	8000594 <MCAL_RCC_GET_PCLK1Freq>
 800069a:	60f8      	str	r0, [r7, #12]
	BRR = UART_BRR_Register(pclk, UART_Config->Baud_rate);
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a8:	0119      	lsls	r1, r3, #4
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	009a      	lsls	r2, r3, #2
 80006b4:	441a      	add	r2, r3
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	68f8      	ldr	r0, [r7, #12]
 80006c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	fb00 f303 	mul.w	r3, r0, r3
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	011b      	lsls	r3, r3, #4
 80006d6:	4a22      	ldr	r2, [pc, #136]	; (8000760 <MCAL_UART_Init+0x17c>)
 80006d8:	fba2 2303 	umull	r2, r3, r2, r3
 80006dc:	095b      	lsrs	r3, r3, #5
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	430b      	orrs	r3, r1
 80006e4:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR ;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	68ba      	ldr	r2, [r7, #8]
 80006ea:	609a      	str	r2, [r3, #8]
	if (UART_Config->IRQ_Enable != USART_IRQ_Enable_NONE)
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	7b1b      	ldrb	r3, [r3, #12]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d026      	beq.n	8000742 <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |=UART_Config->IRQ_Enable;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	7b12      	ldrb	r2, [r2, #12]
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60da      	str	r2, [r3, #12]
		if		(USARTx==USART1)  		 {NVIC_IRQ37_USART1_Enable;}
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MCAL_UART_Init+0x16c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d106      	bne.n	8000718 <MCAL_UART_Init+0x134>
 800070a:	4b16      	ldr	r3, [pc, #88]	; (8000764 <MCAL_UART_Init+0x180>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MCAL_UART_Init+0x180>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6053      	str	r3, [r2, #4]
		else if (USARTx==USART2)		 {NVIC_IRQ38_USART2_Enable;}
		else if (USARTx==USART3)		 {NVIC_IRQ39_USART3_Enable;}
	}

}
 8000716:	e014      	b.n	8000742 <MCAL_UART_Init+0x15e>
		else if (USARTx==USART2)		 {NVIC_IRQ38_USART2_Enable;}
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MCAL_UART_Init+0x174>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d106      	bne.n	800072e <MCAL_UART_Init+0x14a>
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <MCAL_UART_Init+0x180>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <MCAL_UART_Init+0x180>)
 8000726:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072a:	6053      	str	r3, [r2, #4]
}
 800072c:	e009      	b.n	8000742 <MCAL_UART_Init+0x15e>
		else if (USARTx==USART3)		 {NVIC_IRQ39_USART3_Enable;}
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4a0a      	ldr	r2, [pc, #40]	; (800075c <MCAL_UART_Init+0x178>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d105      	bne.n	8000742 <MCAL_UART_Init+0x15e>
 8000736:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <MCAL_UART_Init+0x180>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <MCAL_UART_Init+0x180>)
 800073c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000740:	6053      	str	r3, [r2, #4]
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	2000001c 	.word	0x2000001c
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	40004400 	.word	0x40004400
 800075c:	40004800 	.word	0x40004800
 8000760:	51eb851f 	.word	0x51eb851f
 8000764:	e000e100 	.word	0xe000e100

08000768 <MCAL_UART_SendData>:
 * @param [in] 		- UART_Config: All UART Configuration
 * @retval 			- none
 * Note				- none
======================================================================**/
void MCAL_UART_SendData(USART_TypeDef *USARTx,uint16_t *pTxBuffer,enum polling_mecism pollingEn)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	4613      	mov	r3, r2
 8000774:	71fb      	strb	r3, [r7, #7]
	if (pollingEn==Enable) {while(!(USARTx->SR & 1<<7));}
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d106      	bne.n	800078a <MCAL_UART_SendData+0x22>
 800077c:	bf00      	nop
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0f9      	beq.n	800077e <MCAL_UART_SendData+0x16>
		bit*/
		USARTx->DR = (*pTxBuffer & (uint16_t)0x01FF);
	}
	else
	{
		USARTx->DR = (*pTxBuffer & (uint8_t)0xFF);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	881b      	ldrh	r3, [r3, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	605a      	str	r2, [r3, #4]
	}
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr
	...

080007a0 <MCAL_UART_ReceiveData>:
 * @param [in] 		- Global_UART_Config: All UART Configuration
 * @retval 			- none
 * Note				- none
======================================================================**/
void MCAL_UART_ReceiveData(USART_TypeDef *USARTx,uint16_t *pRxBuffer,enum polling_mecism pollingEn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	71fb      	strb	r3, [r7, #7]
	if (pollingEn==Enable) {while(!(USARTx->SR & 1<<5));}
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d106      	bne.n	80007c2 <MCAL_UART_ReceiveData+0x22>
 80007b4:	bf00      	nop
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f003 0320 	and.w	r3, r3, #32
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d0f9      	beq.n	80007b6 <MCAL_UART_ReceiveData+0x16>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF );
		}
	}
	else
	{
		if(Global_UART_Config->parity == USART_Paratiy_NONE)
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <MCAL_UART_ReceiveData+0x58>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	7a5b      	ldrb	r3, [r3, #9]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d107      	bne.n	80007dc <MCAL_UART_ReceiveData+0x3c>
		{
			//no parity So all 8bit are considered data
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF );
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	b29b      	uxth	r3, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	801a      	strh	r2, [r3, #0]
			//Parity is used, so,7 bits will be of user data and 1 bit is parity
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0x7F );
		}

	}
}
 80007da:	e007      	b.n	80007ec <MCAL_UART_ReceiveData+0x4c>
			*((uint16_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0x7F );
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	801a      	strh	r2, [r3, #0]
}
 80007ec:	bf00      	nop
 80007ee:	3714      	adds	r7, #20
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	2000001c 	.word	0x2000001c

080007fc <MCAL_UART_GPIO_set_pins>:
 * @param [in] 	- USARTx: where x can be (1..3 depending on device used)
 * @retval 		-none
 * Note			-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
======================================================================**/
void MCAL_UART_GPIO_set_pins(USART_TypeDef *USARTx)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t PinCfg ;

	if ( USARTx == USART1 )
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a2b      	ldr	r2, [pc, #172]	; (80008b4 <MCAL_UART_GPIO_set_pins+0xb8>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d118      	bne.n	800083e <MCAL_UART_GPIO_set_pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//PA9 TX
		PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 800080c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000810:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALTERNATIVE_OUTPUT_PP;
 8000812:	2306      	movs	r3, #6
 8000814:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &PinCfg);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	4825      	ldr	r0, [pc, #148]	; (80008b8 <MCAL_UART_GPIO_set_pins+0xbc>)
 8000822:	f7ff fe06 	bl	8000432 <MCAL_GPIO_INIT>

		//PA10 RX
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALTERNATIVE_INPUT;
 800082c:	2308      	movs	r3, #8
 800082e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &PinCfg);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4619      	mov	r1, r3
 8000836:	4820      	ldr	r0, [pc, #128]	; (80008b8 <MCAL_UART_GPIO_set_pins+0xbc>)
 8000838:	f7ff fdfb 	bl	8000432 <MCAL_GPIO_INIT>
			PinCfg.GPIO_MODE = GPIO_MODE_ALTERNATIVE_OUTPUT_PP;
			PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
			MCAL_GPIO_INIT(GPIOA, &PinCfg);
		}
	}
}
 800083c:	e036      	b.n	80008ac <MCAL_UART_GPIO_set_pins+0xb0>
	else if ( USARTx == USART2 )
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <MCAL_UART_GPIO_set_pins+0xc0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d116      	bne.n	8000874 <MCAL_UART_GPIO_set_pins+0x78>
		PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000846:	2304      	movs	r3, #4
 8000848:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALTERNATIVE_OUTPUT_PP;
 800084a:	2306      	movs	r3, #6
 800084c:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 800084e:	2301      	movs	r3, #1
 8000850:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &PinCfg);
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	4619      	mov	r1, r3
 8000858:	4817      	ldr	r0, [pc, #92]	; (80008b8 <MCAL_UART_GPIO_set_pins+0xbc>)
 800085a:	f7ff fdea 	bl	8000432 <MCAL_GPIO_INIT>
		PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 800085e:	2308      	movs	r3, #8
 8000860:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_FLOATINg_INPUT;
 8000862:	2301      	movs	r3, #1
 8000864:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &PinCfg);
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	4619      	mov	r1, r3
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MCAL_UART_GPIO_set_pins+0xbc>)
 800086e:	f7ff fde0 	bl	8000432 <MCAL_GPIO_INIT>
}
 8000872:	e01b      	b.n	80008ac <MCAL_UART_GPIO_set_pins+0xb0>
	else if ( USARTx == USART3 )
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a12      	ldr	r2, [pc, #72]	; (80008c0 <MCAL_UART_GPIO_set_pins+0xc4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d117      	bne.n	80008ac <MCAL_UART_GPIO_set_pins+0xb0>
		PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 800087c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000880:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALTERNATIVE_OUTPUT_PP;
 8000882:	2306      	movs	r3, #6
 8000884:	73bb      	strb	r3, [r7, #14]
		PinCfg.GPIO_OUTPUT_SPEED = GPIO_OUTPUT_SPEED_10M;
 8000886:	2301      	movs	r3, #1
 8000888:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_INIT(GPIOA, &PinCfg);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4809      	ldr	r0, [pc, #36]	; (80008b8 <MCAL_UART_GPIO_set_pins+0xbc>)
 8000892:	f7ff fdce 	bl	8000432 <MCAL_GPIO_INIT>
		PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000896:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800089a:	81bb      	strh	r3, [r7, #12]
		PinCfg.GPIO_MODE = GPIO_MODE_ALTERNATIVE_INPUT;
 800089c:	2308      	movs	r3, #8
 800089e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_INIT(GPIOA, &PinCfg);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MCAL_UART_GPIO_set_pins+0xbc>)
 80008a8:	f7ff fdc3 	bl	8000432 <MCAL_GPIO_INIT>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40013800 	.word	0x40013800
 80008b8:	40010800 	.word	0x40010800
 80008bc:	40004400 	.word	0x40004400
 80008c0:	40004800 	.word	0x40004800

080008c4 <USART1_IRQHandler>:

//ISR
void USART1_IRQHandler (void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <USART1_IRQHandler+0x10>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691b      	ldr	r3, [r3, #16]
 80008ce:	4798      	blx	r3
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000001c 	.word	0x2000001c

080008d8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 80008dc:	4b02      	ldr	r3, [pc, #8]	; (80008e8 <USART2_IRQHandler+0x10>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	691b      	ldr	r3, [r3, #16]
 80008e2:	4798      	blx	r3

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	2000001c 	.word	0x2000001c

080008ec <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack() ;
 80008f0:	4b02      	ldr	r3, [pc, #8]	; (80008fc <USART3_IRQHandler+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	4798      	blx	r3
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	2000001c 	.word	0x2000001c

08000900 <main>:
uint16_t ch ;
UART_Config uartCFG ;


int main(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	clock_init();
 8000904:	f000 f828 	bl	8000958 <clock_init>
	uartCFG.Baud_rate = USART_BaudRate_115200;
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <main+0x4c>)
 800090a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800090e:	605a      	str	r2, [r3, #4]
	uartCFG.HWFlowCtrl = USART_FlowCtrl_NONE ;
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <main+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	72da      	strb	r2, [r3, #11]
	uartCFG.IRQ_Enable = USART_IRQ_Enable_RXNEIE ;
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <main+0x4c>)
 8000918:	2220      	movs	r2, #32
 800091a:	731a      	strb	r2, [r3, #12]
	uartCFG.P_IRQ_CallBack = UART_IRQ_Callback ;
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <main+0x4c>)
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <main+0x50>)
 8000920:	611a      	str	r2, [r3, #16]
	uartCFG.parity =USART_Paratiy_NONE ;
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <main+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	725a      	strb	r2, [r3, #9]
	uartCFG.PayLoad_Length = USART_Payload_Length_8B;
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <main+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	721a      	strb	r2, [r3, #8]
	uartCFG.stopBits = USART_StopBits_ONE;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <main+0x4c>)
 8000930:	2200      	movs	r2, #0
 8000932:	729a      	strb	r2, [r3, #10]
	uartCFG.USART_Mode =USART_Mode_TX_RX ;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <main+0x4c>)
 8000936:	220c      	movs	r2, #12
 8000938:	701a      	strb	r2, [r3, #0]
	MCAL_UART_Init(USART1,&uartCFG);
 800093a:	4904      	ldr	r1, [pc, #16]	; (800094c <main+0x4c>)
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <main+0x54>)
 800093e:	f7ff fe51 	bl	80005e4 <MCAL_UART_Init>
	MCAL_UART_GPIO_set_pins(USART1);
 8000942:	4804      	ldr	r0, [pc, #16]	; (8000954 <main+0x54>)
 8000944:	f7ff ff5a 	bl	80007fc <MCAL_UART_GPIO_set_pins>
	while (1)
 8000948:	e7fe      	b.n	8000948 <main+0x48>
 800094a:	bf00      	nop
 800094c:	2000005c 	.word	0x2000005c
 8000950:	0800098d 	.word	0x0800098d
 8000954:	40013800 	.word	0x40013800

08000958 <clock_init>:
	{

	}
}
void clock_init()
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
	// Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <clock_init+0x30>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a09      	ldr	r2, [pc, #36]	; (8000988 <clock_init+0x30>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
	// Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <clock_init+0x30>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <clock_init+0x30>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6193      	str	r3, [r2, #24]
	// Enable clock AFIO
	RCC_AFIO_CLK_EN();
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <clock_init+0x30>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a03      	ldr	r2, [pc, #12]	; (8000988 <clock_init+0x30>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	6193      	str	r3, [r2, #24]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000

0800098c <UART_IRQ_Callback>:
void UART_IRQ_Callback (void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1,&ch, Disable);
 8000990:	2201      	movs	r2, #1
 8000992:	4905      	ldr	r1, [pc, #20]	; (80009a8 <UART_IRQ_Callback+0x1c>)
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <UART_IRQ_Callback+0x20>)
 8000996:	f7ff ff03 	bl	80007a0 <MCAL_UART_ReceiveData>
	MCAL_UART_SendData(USART1,&ch, Enable);
 800099a:	2200      	movs	r2, #0
 800099c:	4902      	ldr	r1, [pc, #8]	; (80009a8 <UART_IRQ_Callback+0x1c>)
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <UART_IRQ_Callback+0x20>)
 80009a0:	f7ff fee2 	bl	8000768 <MCAL_UART_SendData>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000070 	.word	0x20000070
 80009ac:	40013800 	.word	0x40013800

080009b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009b2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b8:	480c      	ldr	r0, [pc, #48]	; (80009ec <LoopForever+0x6>)
  ldr r1, =_edata
 80009ba:	490d      	ldr	r1, [pc, #52]	; (80009f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <LoopForever+0xe>)
  movs r3, #0
 80009be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c0:	e002      	b.n	80009c8 <LoopCopyDataInit>

080009c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009c6:	3304      	adds	r3, #4

080009c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009cc:	d3f9      	bcc.n	80009c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d0:	4c0a      	ldr	r4, [pc, #40]	; (80009fc <LoopForever+0x16>)
  movs r3, #0
 80009d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d4:	e001      	b.n	80009da <LoopFillZerobss>

080009d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d8:	3204      	adds	r2, #4

080009da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009dc:	d3fb      	bcc.n	80009d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009de:	f000 f811 	bl	8000a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009e2:	f7ff ff8d 	bl	8000900 <main>

080009e6 <LoopForever>:

LoopForever:
    b LoopForever
 80009e6:	e7fe      	b.n	80009e6 <LoopForever>
  ldr   r0, =_estack
 80009e8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80009ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009f4:	08000a84 	.word	0x08000a84
  ldr r2, =_sbss
 80009f8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009fc:	20000074 	.word	0x20000074

08000a00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a00:	e7fe      	b.n	8000a00 <ADC1_2_IRQHandler>
	...

08000a04 <__libc_init_array>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	2500      	movs	r5, #0
 8000a08:	4e0c      	ldr	r6, [pc, #48]	; (8000a3c <__libc_init_array+0x38>)
 8000a0a:	4c0d      	ldr	r4, [pc, #52]	; (8000a40 <__libc_init_array+0x3c>)
 8000a0c:	1ba4      	subs	r4, r4, r6
 8000a0e:	10a4      	asrs	r4, r4, #2
 8000a10:	42a5      	cmp	r5, r4
 8000a12:	d109      	bne.n	8000a28 <__libc_init_array+0x24>
 8000a14:	f000 f81a 	bl	8000a4c <_init>
 8000a18:	2500      	movs	r5, #0
 8000a1a:	4e0a      	ldr	r6, [pc, #40]	; (8000a44 <__libc_init_array+0x40>)
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <__libc_init_array+0x44>)
 8000a1e:	1ba4      	subs	r4, r4, r6
 8000a20:	10a4      	asrs	r4, r4, #2
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	d105      	bne.n	8000a32 <__libc_init_array+0x2e>
 8000a26:	bd70      	pop	{r4, r5, r6, pc}
 8000a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a2c:	4798      	blx	r3
 8000a2e:	3501      	adds	r5, #1
 8000a30:	e7ee      	b.n	8000a10 <__libc_init_array+0xc>
 8000a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a36:	4798      	blx	r3
 8000a38:	3501      	adds	r5, #1
 8000a3a:	e7f2      	b.n	8000a22 <__libc_init_array+0x1e>
 8000a3c:	08000a7c 	.word	0x08000a7c
 8000a40:	08000a7c 	.word	0x08000a7c
 8000a44:	08000a7c 	.word	0x08000a7c
 8000a48:	08000a80 	.word	0x08000a80

08000a4c <_init>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr

08000a58 <_fini>:
 8000a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a5a:	bf00      	nop
 8000a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a5e:	bc08      	pop	{r3}
 8000a60:	469e      	mov	lr, r3
 8000a62:	4770      	bx	lr
