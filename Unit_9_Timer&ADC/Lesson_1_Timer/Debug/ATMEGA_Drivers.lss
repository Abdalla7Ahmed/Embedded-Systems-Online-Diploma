
ATMEGA_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000047e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  000004f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000102d  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e8  00000000  00000000  000016d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099f  00000000  00000000  00001fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000747  00000000  00000000  00002d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007cb  00000000  00000000  0000345f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00003c2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_1>
   8:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_2>
   c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_10>
  2c:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 37       	cpi	r26, 0x70	; 112
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  8a:	0c 94 3d 02 	jmp	0x47a	; 0x47a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IRQ_callback>:
#include <avr/io.h>
#include "MCAL/Includes/Include_MCAL_files.h"

void IRQ_callback(void)
{
	MCAL_DIO_Toggle_Port(DIOA);
  92:	89 e3       	ldi	r24, 0x39	; 57
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 95 00 	call	0x12a	; 0x12a <MCAL_DIO_Toggle_Port>
  9a:	08 95       	ret

0000009c <main>:
}


int main(void)
{
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	29 97       	sbiw	r28, 0x09	; 9
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	DDRA = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8a bb       	out	0x1a, r24	; 26
	
	Timer0_config_t Timer0;
	Timer0.Timer0_mode = Timer0_Fast_PWM_mode;
  b4:	88 e4       	ldi	r24, 0x48	; 72
  b6:	89 83       	std	Y+1, r24	; 0x01
	Timer0.Clock_Select = Clock_Select_8_prescaling;
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	8b 83       	std	Y+3, r24	; 0x03
	//Timer0.Interrupt_controle = Interrupt_Enable_Compare;
	Timer0.P_IRQ_Callback = IRQ_callback;
  bc:	89 e4       	ldi	r24, 0x49	; 73
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	99 87       	std	Y+9, r25	; 0x09
  c2:	88 87       	std	Y+8, r24	; 0x08
	Timer0.OCO_Actio=Clear_OC0_on_compare_set_OCO_at_BOTTOM;
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	8a 83       	std	Y+2, r24	; 0x02
	Timer0.Output_Compare_Register_Value = 0xF0;
  c8:	80 ef       	ldi	r24, 0xF0	; 240
  ca:	8d 83       	std	Y+5, r24	; 0x05
	MCAL_Timer0_init(&Timer0);
  cc:	ce 01       	movw	r24, r28
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	0e 94 ac 01 	call	0x358	; 0x358 <MCAL_Timer0_init>
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x38>

000000d6 <MCAL_DIO_init>:
uint8_t MCAL_DIO_Read_Port(Typdef_DIOx_t *DIOx)
{
	uint8_t PORT_value;
	PORT_value=DIOx->PINx;
	return PORT_value;
}
  d6:	fc 01       	movw	r30, r24
  d8:	db 01       	movw	r26, r22
  da:	11 96       	adiw	r26, 0x01	; 1
  dc:	8c 91       	ld	r24, X
  de:	11 97       	sbiw	r26, 0x01	; 1
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	79 f0       	breq	.+30     	; 0x102 <MCAL_DIO_init+0x2c>
  e4:	18 f0       	brcs	.+6      	; 0xec <MCAL_DIO_init+0x16>
  e6:	82 30       	cpi	r24, 0x02	; 2
  e8:	b1 f0       	breq	.+44     	; 0x116 <MCAL_DIO_init+0x40>
  ea:	08 95       	ret
  ec:	91 81       	ldd	r25, Z+1	; 0x01
  ee:	8c 91       	ld	r24, X
  f0:	80 95       	com	r24
  f2:	89 23       	and	r24, r25
  f4:	81 83       	std	Z+1, r24	; 0x01
  f6:	92 81       	ldd	r25, Z+2	; 0x02
  f8:	8c 91       	ld	r24, X
  fa:	80 95       	com	r24
  fc:	89 23       	and	r24, r25
  fe:	82 83       	std	Z+2, r24	; 0x02
 100:	08 95       	ret
 102:	91 81       	ldd	r25, Z+1	; 0x01
 104:	8c 91       	ld	r24, X
 106:	80 95       	com	r24
 108:	89 23       	and	r24, r25
 10a:	81 83       	std	Z+1, r24	; 0x01
 10c:	92 81       	ldd	r25, Z+2	; 0x02
 10e:	8c 91       	ld	r24, X
 110:	89 2b       	or	r24, r25
 112:	82 83       	std	Z+2, r24	; 0x02
 114:	08 95       	ret
 116:	91 81       	ldd	r25, Z+1	; 0x01
 118:	8c 91       	ld	r24, X
 11a:	89 2b       	or	r24, r25
 11c:	81 83       	std	Z+1, r24	; 0x01
 11e:	08 95       	ret

00000120 <MCAL_DIO_Toggle_Pin>:
 * Note		  - none
================================================================**/

void MCAL_DIO_Toggle_Pin(Typdef_DIOx_t *DIOx,uint8_t Pin_number)
{
	DIOx->PORTx ^=Pin_number;
 120:	fc 01       	movw	r30, r24
 122:	22 81       	ldd	r18, Z+2	; 0x02
 124:	62 27       	eor	r22, r18
 126:	62 83       	std	Z+2, r22	; 0x02
 128:	08 95       	ret

0000012a <MCAL_DIO_Toggle_Port>:
 * @param[in] - base address of DIOx :can be (A ..... D )
 * @retval	  - none
 * Note		  - none
================================================================**/
void MCAL_DIO_Toggle_Port(Typdef_DIOx_t *DIOx)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
	DIOx->DDRx = 0xFF;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	89 83       	std	Y+1, r24	; 0x01
	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_0);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	ce 01       	movw	r24, r28
 138:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_1);     
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	ce 01       	movw	r24, r28
 140:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_2);
 144:	64 e0       	ldi	r22, 0x04	; 4
 146:	ce 01       	movw	r24, r28
 148:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_3);
 14c:	68 e0       	ldi	r22, 0x08	; 8
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_4);
 154:	60 e1       	ldi	r22, 0x10	; 16
 156:	ce 01       	movw	r24, r28
 158:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_5);
 15c:	60 e2       	ldi	r22, 0x20	; 32
 15e:	ce 01       	movw	r24, r28
 160:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_6);
 164:	60 e4       	ldi	r22, 0x40	; 64
 166:	ce 01       	movw	r24, r28
 168:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 	MCAL_DIO_Toggle_Pin(DIOx,DIO_PIN_7);
 16c:	60 e8       	ldi	r22, 0x80	; 128
 16e:	ce 01       	movw	r24, r28
 170:	0e 94 90 00 	call	0x120	; 0x120 <MCAL_DIO_Toggle_Pin>
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <__vector_1>:
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// IRQ Functions
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

ISR(INT0_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	GP_IRQ_CallBack[0]();
 19c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <GP_IRQ_CallBack>
 1a0:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <GP_IRQ_CallBack+0x1>
 1a4:	09 95       	icall
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_2>:
ISR(INT1_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	GP_IRQ_CallBack[1]();
 1ea:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <GP_IRQ_CallBack+0x2>
 1ee:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <GP_IRQ_CallBack+0x3>
 1f2:	09 95       	icall
}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	bf 91       	pop	r27
 1fa:	af 91       	pop	r26
 1fc:	9f 91       	pop	r25
 1fe:	8f 91       	pop	r24
 200:	7f 91       	pop	r23
 202:	6f 91       	pop	r22
 204:	5f 91       	pop	r21
 206:	4f 91       	pop	r20
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <__vector_3>:
ISR(INT2_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	11 24       	eor	r1, r1
 220:	2f 93       	push	r18
 222:	3f 93       	push	r19
 224:	4f 93       	push	r20
 226:	5f 93       	push	r21
 228:	6f 93       	push	r22
 22a:	7f 93       	push	r23
 22c:	8f 93       	push	r24
 22e:	9f 93       	push	r25
 230:	af 93       	push	r26
 232:	bf 93       	push	r27
 234:	ef 93       	push	r30
 236:	ff 93       	push	r31
	GP_IRQ_CallBack[2]();
 238:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <GP_IRQ_CallBack+0x4>
 23c:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <GP_IRQ_CallBack+0x5>
 240:	09 95       	icall
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <MCAL_Timer0_UPdate_Counter>:
 * Note		  - none
================================================================**/	
uint32_t MCAL_Timer0_GET_Number_of_overflow_Value(void)
{
	return Number_of_Oveflow;
}
 264:	82 bf       	out	0x32, r24	; 50
 266:	08 95       	ret

00000268 <MCAL_Timer0_UPdate_Compair>:
 268:	8c bf       	out	0x3c, r24	; 60
 26a:	08 95       	ret

0000026c <MCAL_Timer0_Init_Normal_AND_CTC_Mode>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	80 31       	cpi	r24, 0x10	; 16
 276:	61 f0       	breq	.+24     	; 0x290 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x24>
 278:	18 f4       	brcc	.+6      	; 0x280 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x14>
 27a:	88 23       	and	r24, r24
 27c:	31 f0       	breq	.+12     	; 0x28a <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x1e>
 27e:	13 c0       	rjmp	.+38     	; 0x2a6 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x3a>
 280:	80 32       	cpi	r24, 0x20	; 32
 282:	51 f0       	breq	.+20     	; 0x298 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x2c>
 284:	80 33       	cpi	r24, 0x30	; 48
 286:	61 f0       	breq	.+24     	; 0x2a0 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x34>
 288:	0e c0       	rjmp	.+28     	; 0x2a6 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x3a>
 28a:	83 b7       	in	r24, 0x33	; 51
 28c:	83 bf       	out	0x33, r24	; 51
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x3a>
 290:	83 b7       	in	r24, 0x33	; 51
 292:	80 61       	ori	r24, 0x10	; 16
 294:	83 bf       	out	0x33, r24	; 51
 296:	07 c0       	rjmp	.+14     	; 0x2a6 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x3a>
 298:	83 b7       	in	r24, 0x33	; 51
 29a:	80 62       	ori	r24, 0x20	; 32
 29c:	83 bf       	out	0x33, r24	; 51
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x3a>
 2a0:	83 b7       	in	r24, 0x33	; 51
 2a2:	80 63       	ori	r24, 0x30	; 48
 2a4:	83 bf       	out	0x33, r24	; 51
 2a6:	8d 81       	ldd	r24, Y+5	; 0x05
 2a8:	88 23       	and	r24, r24
 2aa:	a9 f0       	breq	.+42     	; 0x2d6 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x6a>
 2ac:	8f b7       	in	r24, 0x3f	; 63
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	8f bf       	out	0x3f, r24	; 63
 2b2:	8f 81       	ldd	r24, Y+7	; 0x07
 2b4:	98 85       	ldd	r25, Y+8	; 0x08
 2b6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <Timer0_IRQ_Compare_value_CallBack+0x1>
 2ba:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <Timer0_IRQ_Compare_value_CallBack>
 2be:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <Timer0_IRQ_OverFlow_CallBack+0x1>
 2c2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <Timer0_IRQ_OverFlow_CallBack>
 2c6:	89 b7       	in	r24, 0x39	; 57
 2c8:	9d 81       	ldd	r25, Y+5	; 0x05
 2ca:	92 30       	cpi	r25, 0x02	; 2
 2cc:	09 f0       	breq	.+2      	; 0x2d0 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x64>
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	89 2b       	or	r24, r25
 2d2:	89 bf       	out	0x39, r24	; 57
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x82>
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	82 30       	cpi	r24, 0x02	; 2
 2da:	21 f4       	brne	.+8      	; 0x2e4 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x78>
 2dc:	08 b6       	in	r0, 0x38	; 56
 2de:	01 fe       	sbrs	r0, 1
 2e0:	fd cf       	rjmp	.-6      	; 0x2dc <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x70>
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x82>
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	19 f4       	brne	.+6      	; 0x2ee <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x82>
 2e8:	08 b6       	in	r0, 0x38	; 56
 2ea:	00 fe       	sbrs	r0, 0
 2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <MCAL_Timer0_Init_Normal_AND_CTC_Mode+0x7c>
 2ee:	8b 81       	ldd	r24, Y+3	; 0x03
 2f0:	0e 94 32 01 	call	0x264	; 0x264 <MCAL_Timer0_UPdate_Counter>
 2f4:	8c 81       	ldd	r24, Y+4	; 0x04
 2f6:	0e 94 34 01 	call	0x268	; 0x268 <MCAL_Timer0_UPdate_Compair>
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <MCAL_Timer0_Init_PWM_Mode>:
 300:	fc 01       	movw	r30, r24
 302:	91 81       	ldd	r25, Z+1	; 0x01
 304:	90 32       	cpi	r25, 0x20	; 32
 306:	39 f0       	breq	.+14     	; 0x316 <MCAL_Timer0_Init_PWM_Mode+0x16>
 308:	90 33       	cpi	r25, 0x30	; 48
 30a:	49 f0       	breq	.+18     	; 0x31e <MCAL_Timer0_Init_PWM_Mode+0x1e>
 30c:	91 11       	cpse	r25, r1
 30e:	0a c0       	rjmp	.+20     	; 0x324 <MCAL_Timer0_Init_PWM_Mode+0x24>
 310:	83 b7       	in	r24, 0x33	; 51
 312:	83 bf       	out	0x33, r24	; 51
 314:	07 c0       	rjmp	.+14     	; 0x324 <MCAL_Timer0_Init_PWM_Mode+0x24>
 316:	83 b7       	in	r24, 0x33	; 51
 318:	80 62       	ori	r24, 0x20	; 32
 31a:	83 bf       	out	0x33, r24	; 51
 31c:	03 c0       	rjmp	.+6      	; 0x324 <MCAL_Timer0_Init_PWM_Mode+0x24>
 31e:	83 b7       	in	r24, 0x33	; 51
 320:	80 63       	ori	r24, 0x30	; 48
 322:	83 bf       	out	0x33, r24	; 51
 324:	84 81       	ldd	r24, Z+4	; 0x04
 326:	0e 94 34 01 	call	0x268	; 0x268 <MCAL_Timer0_UPdate_Compair>
 32a:	08 95       	ret

0000032c <MCAL_Timer0_Init_Fast_PWM_Mode>:
 32c:	fc 01       	movw	r30, r24
 32e:	91 81       	ldd	r25, Z+1	; 0x01
 330:	90 32       	cpi	r25, 0x20	; 32
 332:	39 f0       	breq	.+14     	; 0x342 <MCAL_Timer0_Init_Fast_PWM_Mode+0x16>
 334:	90 33       	cpi	r25, 0x30	; 48
 336:	49 f0       	breq	.+18     	; 0x34a <MCAL_Timer0_Init_Fast_PWM_Mode+0x1e>
 338:	91 11       	cpse	r25, r1
 33a:	0a c0       	rjmp	.+20     	; 0x350 <MCAL_Timer0_Init_Fast_PWM_Mode+0x24>
 33c:	83 b7       	in	r24, 0x33	; 51
 33e:	83 bf       	out	0x33, r24	; 51
 340:	07 c0       	rjmp	.+14     	; 0x350 <MCAL_Timer0_Init_Fast_PWM_Mode+0x24>
 342:	83 b7       	in	r24, 0x33	; 51
 344:	80 62       	ori	r24, 0x20	; 32
 346:	83 bf       	out	0x33, r24	; 51
 348:	03 c0       	rjmp	.+6      	; 0x350 <MCAL_Timer0_Init_Fast_PWM_Mode+0x24>
 34a:	83 b7       	in	r24, 0x33	; 51
 34c:	80 63       	ori	r24, 0x30	; 48
 34e:	83 bf       	out	0x33, r24	; 51
 350:	84 81       	ldd	r24, Z+4	; 0x04
 352:	0e 94 34 01 	call	0x268	; 0x268 <MCAL_Timer0_UPdate_Compair>
 356:	08 95       	ret

00000358 <MCAL_Timer0_init>:
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	ec 01       	movw	r28, r24
 35e:	93 b7       	in	r25, 0x33	; 51
 360:	88 81       	ld	r24, Y
 362:	89 2b       	or	r24, r25
 364:	83 bf       	out	0x33, r24	; 51
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	88 23       	and	r24, r24
 36a:	59 f0       	breq	.+22     	; 0x382 <MCAL_Timer0_init+0x2a>
 36c:	ea e6       	ldi	r30, 0x6A	; 106
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	81 83       	std	Z+1, r24	; 0x01
 374:	88 e0       	ldi	r24, 0x08	; 8
 376:	80 83       	st	Z, r24
 378:	bf 01       	movw	r22, r30
 37a:	86 e3       	ldi	r24, 0x36	; 54
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 6b 00 	call	0xd6	; 0xd6 <MCAL_DIO_init>
 382:	93 b7       	in	r25, 0x33	; 51
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	89 2b       	or	r24, r25
 388:	83 bf       	out	0x33, r24	; 51
 38a:	88 81       	ld	r24, Y
 38c:	88 23       	and	r24, r24
 38e:	11 f0       	breq	.+4      	; 0x394 <MCAL_Timer0_init+0x3c>
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	21 f4       	brne	.+8      	; 0x39c <MCAL_Timer0_init+0x44>
 394:	ce 01       	movw	r24, r28
 396:	0e 94 36 01 	call	0x26c	; 0x26c <MCAL_Timer0_Init_Normal_AND_CTC_Mode>
 39a:	0b c0       	rjmp	.+22     	; 0x3b2 <MCAL_Timer0_init+0x5a>
 39c:	80 34       	cpi	r24, 0x40	; 64
 39e:	21 f4       	brne	.+8      	; 0x3a8 <MCAL_Timer0_init+0x50>
 3a0:	ce 01       	movw	r24, r28
 3a2:	0e 94 80 01 	call	0x300	; 0x300 <MCAL_Timer0_Init_PWM_Mode>
 3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <MCAL_Timer0_init+0x5a>
 3a8:	88 34       	cpi	r24, 0x48	; 72
 3aa:	19 f4       	brne	.+6      	; 0x3b2 <MCAL_Timer0_init+0x5a>
 3ac:	ce 01       	movw	r24, r28
 3ae:	0e 94 96 01 	call	0x32c	; 0x32c <MCAL_Timer0_Init_Fast_PWM_Mode>
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <__vector_10>:
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
// ISR
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

ISR(TIMER0_COMP_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	2f 93       	push	r18
 3c4:	3f 93       	push	r19
 3c6:	4f 93       	push	r20
 3c8:	5f 93       	push	r21
 3ca:	6f 93       	push	r22
 3cc:	7f 93       	push	r23
 3ce:	8f 93       	push	r24
 3d0:	9f 93       	push	r25
 3d2:	af 93       	push	r26
 3d4:	bf 93       	push	r27
 3d6:	ef 93       	push	r30
 3d8:	ff 93       	push	r31
	Timer0_IRQ_Compare_value_CallBack();
 3da:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Timer0_IRQ_Compare_value_CallBack>
 3de:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Timer0_IRQ_Compare_value_CallBack+0x1>
 3e2:	09 95       	icall
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <__vector_11>:

ISR(TIMER0_OVF_vect)
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	2f 93       	push	r18
 412:	3f 93       	push	r19
 414:	4f 93       	push	r20
 416:	5f 93       	push	r21
 418:	6f 93       	push	r22
 41a:	7f 93       	push	r23
 41c:	8f 93       	push	r24
 41e:	9f 93       	push	r25
 420:	af 93       	push	r26
 422:	bf 93       	push	r27
 424:	ef 93       	push	r30
 426:	ff 93       	push	r31
	Number_of_Oveflow ++;
 428:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 42c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 430:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 434:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	a1 1d       	adc	r26, r1
 43c:	b1 1d       	adc	r27, r1
 43e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 442:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 446:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 44a:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	Timer0_IRQ_OverFlow_CallBack();
 44e:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Timer0_IRQ_OverFlow_CallBack>
 452:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Timer0_IRQ_OverFlow_CallBack+0x1>
 456:	09 95       	icall
 458:	ff 91       	pop	r31
 45a:	ef 91       	pop	r30
 45c:	bf 91       	pop	r27
 45e:	af 91       	pop	r26
 460:	9f 91       	pop	r25
 462:	8f 91       	pop	r24
 464:	7f 91       	pop	r23
 466:	6f 91       	pop	r22
 468:	5f 91       	pop	r21
 46a:	4f 91       	pop	r20
 46c:	3f 91       	pop	r19
 46e:	2f 91       	pop	r18
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <_exit>:
 47a:	f8 94       	cli

0000047c <__stop_program>:
 47c:	ff cf       	rjmp	.-2      	; 0x47c <__stop_program>
