
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000027e  00000312  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000341  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000034f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a6e  00000000  00000000  00000387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  000013cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000228  00000000  00000000  000018e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000266  00000266  000002fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    000000c8  000000b0  000000b0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_1 00000048  00000178  00000178  0000020c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_2 00000048  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__vector_3 00000048  00000208  00000208  0000029c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .data.PDDRD   00000002  00800060  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 19 .data.PPORTD  00000002  00800062  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 20 .data.PGICR   00000002  00800064  00000278  0000030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .data.PMCUCSR 00000002  00800066  0000027a  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 22 .data.PMCUCR  00000002  00800068  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 23 .text.__dummy_fini 00000002  0000026e  0000026e  00000302  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.__dummy_funcs_on_exit 00000002  00000270  00000270  00000304  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__dummy_simulator_exit 00000002  00000272  00000272  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.exit    00000016  00000250  00000250  000002e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text._Exit   00000004  0000026a  0000026a  000002fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_1>
   8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_2>
   c:	0c 94 04 01 	jmp	0x208	; 0x208 <__vector_3>
  10:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  14:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  18:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  1c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  20:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  24:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  28:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  2c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  30:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  34:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  38:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  3c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  40:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  44:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  48:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  4c:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>
  50:	0c 94 33 01 	jmp	0x266	; 0x266 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 6a       	ori	r16, 0xA0	; 160
  58:	00 02       	muls	r16, r16
  5a:	74 00       	.word	0x0074	; ????

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf e5       	ldi	r28, 0x5F	; 95
  62:	d8 e0       	ldi	r29, 0x08	; 8
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	e4 e5       	ldi	r30, 0x54	; 84
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	17 c0       	rjmp	.+46     	; 0x9e <__do_clear_bss+0x8>
  70:	b5 91       	lpm	r27, Z+
  72:	a5 91       	lpm	r26, Z+
  74:	35 91       	lpm	r19, Z+
  76:	25 91       	lpm	r18, Z+
  78:	05 91       	lpm	r16, Z+
  7a:	07 fd       	sbrc	r16, 7
  7c:	0c c0       	rjmp	.+24     	; 0x96 <__do_clear_bss>
  7e:	95 91       	lpm	r25, Z+
  80:	85 91       	lpm	r24, Z+
  82:	ef 01       	movw	r28, r30
  84:	f9 2f       	mov	r31, r25
  86:	e8 2f       	mov	r30, r24
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a2 17       	cp	r26, r18
  8e:	b3 07       	cpc	r27, r19
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0x20>
  92:	fe 01       	movw	r30, r28
  94:	04 c0       	rjmp	.+8      	; 0x9e <__do_clear_bss+0x8>

00000096 <__do_clear_bss>:
  96:	1d 92       	st	X+, r1
  98:	a2 17       	cp	r26, r18
  9a:	b3 07       	cpc	r27, r19
  9c:	e1 f7       	brne	.-8      	; 0x96 <__do_clear_bss>
  9e:	eb 35       	cpi	r30, 0x5B	; 91
  a0:	f4 07       	cpc	r31, r20
  a2:	31 f7       	brne	.-52     	; 0x70 <__do_copy_data+0x8>
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <_etext>
  a8:	0c 94 28 01 	jmp	0x250	; 0x250 <exit>

000000ac <_exit>:
  ac:	f8 94       	cli

000000ae <__stop_program>:
  ae:	ff cf       	rjmp	.-2      	; 0xae <__stop_program>

Disassembly of section .text:

00000266 <__bad_interrupt>:
 266:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000b0 <main>:


int main(void)
{
	// Set pin 5,6,7 as an output in PORTD
	PDDRD->PIN.Pin5=1;
  b0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b8:	80 81       	ld	r24, Z
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 83       	st	Z, r24
	PDDRD->PIN.Pin6=1;
  be:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c2:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	PDDRD->PIN.Pin7=1;
  cc:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d4:	80 81       	ld	r24, Z
  d6:	80 68       	ori	r24, 0x80	; 128
  d8:	80 83       	st	Z, r24

	
	// External Interrupt 0 (INT0)-PD2. >> irqoccur when “any logical change”
	PMCUCR->PIN.Pin0=1;
  da:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PMCUCR>
  de:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PMCUCR+0x1>
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
	PMCUCR->PIN.Pin1=0;
  e8:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PMCUCR>
  ec:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PMCUCR+0x1>
  f0:	80 81       	ld	r24, Z
  f2:	8d 7f       	andi	r24, 0xFD	; 253
  f4:	80 83       	st	Z, r24
	
    //External Interrupt 1 (INT1)-PD3. >> irqoccur when “rising edge”
	PMCUCR->PIN.Pin2=1;
  f6:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PMCUCR>
  fa:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PMCUCR+0x1>
  fe:	80 81       	ld	r24, Z
 100:	84 60       	ori	r24, 0x04	; 4
 102:	80 83       	st	Z, r24
	PMCUCR->PIN.Pin3=1;
 104:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <PMCUCR>
 108:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <PMCUCR+0x1>
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	
	//External Interrupt 2 (INT2)-PB2. >> irqoccur when “Falling edge”
	PMCUCSR->PIN.Pin6=0;
 112:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <PMCUCSR>
 116:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <PMCUCSR+0x1>
 11a:	80 81       	ld	r24, Z
 11c:	8f 7b       	andi	r24, 0xBF	; 191
 11e:	80 83       	st	Z, r24
	
   // Enable INT0 , INT1 , INT2
	PGICR->PIN.Pin5=1;
 120:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PGICR>
 124:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PGICR+0x1>
 128:	80 81       	ld	r24, Z
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	80 83       	st	Z, r24
	PGICR->PIN.Pin6=1;
 12e:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PGICR>
 132:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PGICR+0x1>
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	PGICR->PIN.Pin7=1;
 13c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <PGICR>
 140:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <PGICR+0x1>
 144:	80 81       	ld	r24, Z
 146:	80 68       	ori	r24, 0x80	; 128
 148:	80 83       	st	Z, r24
	
	// Enable Global interrupt
	sei();
 14a:	78 94       	sei


    while(1)
    {
		// Reset all LEd 
		PPORTD->PIN.Pin5=0;
 14c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PPORTD>
 150:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PPORTD+0x1>
 154:	80 81       	ld	r24, Z
 156:	8f 7d       	andi	r24, 0xDF	; 223
 158:	80 83       	st	Z, r24
		PPORTD->PIN.Pin6=0;
 15a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PPORTD>
 15e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PPORTD+0x1>
 162:	80 81       	ld	r24, Z
 164:	8f 7b       	andi	r24, 0xBF	; 191
 166:	80 83       	st	Z, r24
		PPORTD->PIN.Pin7=0;
 168:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PPORTD>
 16c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PPORTD+0x1>
 170:	80 81       	ld	r24, Z
 172:	8f 77       	andi	r24, 0x7F	; 127
 174:	80 83       	st	Z, r24
 176:	ea cf       	rjmp	.-44     	; 0x14c <main+0x9c>

Disassembly of section .text.__vector_1:

00000178 <__vector_1>:
    }
}
ISR(INT0_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	2f 93       	push	r18
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
	PPORTD->PIN.Pin5=1;
 18c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PPORTD>
 190:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PPORTD+0x1>
 194:	80 81       	ld	r24, Z
 196:	80 62       	ori	r24, 0x20	; 32
 198:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f e3       	ldi	r18, 0x3F	; 63
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <__vector_1+0x28>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <__vector_1+0x32>
 1aa:	00 00       	nop
	_delay_ms(1000);
}
 1ac:	ff 91       	pop	r31
 1ae:	ef 91       	pop	r30
 1b0:	9f 91       	pop	r25
 1b2:	8f 91       	pop	r24
 1b4:	2f 91       	pop	r18
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

Disassembly of section .text.__vector_2:

000001c0 <__vector_2>:
ISR(INT1_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	PPORTD->PIN.Pin6=1;
 1d4:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PPORTD>
 1d8:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PPORTD+0x1>
 1dc:	80 81       	ld	r24, Z
 1de:	80 64       	ori	r24, 0x40	; 64
 1e0:	80 83       	st	Z, r24
 1e2:	2f e3       	ldi	r18, 0x3F	; 63
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <__vector_2+0x28>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <__vector_2+0x32>
 1f2:	00 00       	nop
	_delay_ms(1000);

}
 1f4:	ff 91       	pop	r31
 1f6:	ef 91       	pop	r30
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	2f 91       	pop	r18
 1fe:	0f 90       	pop	r0
 200:	0f be       	out	0x3f, r0	; 63
 202:	0f 90       	pop	r0
 204:	1f 90       	pop	r1
 206:	18 95       	reti

Disassembly of section .text.__vector_3:

00000208 <__vector_3>:
ISR(INT2_vect)
{
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	2f 93       	push	r18
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	PPORTD->PIN.Pin7=1;
 21c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <PPORTD>
 220:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <PPORTD+0x1>
 224:	80 81       	ld	r24, Z
 226:	80 68       	ori	r24, 0x80	; 128
 228:	80 83       	st	Z, r24
 22a:	2f e3       	ldi	r18, 0x3F	; 63
 22c:	8d e0       	ldi	r24, 0x0D	; 13
 22e:	93 e0       	ldi	r25, 0x03	; 3
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <__vector_3+0x28>
 238:	00 c0       	rjmp	.+0      	; 0x23a <__vector_3+0x32>
 23a:	00 00       	nop
	_delay_ms(1000);
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	2f 91       	pop	r18
 246:	0f 90       	pop	r0
 248:	0f be       	out	0x3f, r0	; 63
 24a:	0f 90       	pop	r0
 24c:	1f 90       	pop	r1
 24e:	18 95       	reti

Disassembly of section .text.__dummy_fini:

0000026e <_fini>:
 26e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000270 <__funcs_on_exit>:
 270:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000272 <__simulator_exit>:
 272:	08 95       	ret

Disassembly of section .text.exit:

00000250 <exit>:
 250:	ec 01       	movw	r28, r24
 252:	0e 94 38 01 	call	0x270	; 0x270 <__funcs_on_exit>
 256:	0e 94 37 01 	call	0x26e	; 0x26e <_fini>
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 39 01 	call	0x272	; 0x272 <__simulator_exit>
 260:	ce 01       	movw	r24, r28
 262:	0e 94 35 01 	call	0x26a	; 0x26a <_Exit>

Disassembly of section .text._Exit:

0000026a <_Exit>:
 26a:	0e 94 56 00 	call	0xac	; 0xac <_exit>
