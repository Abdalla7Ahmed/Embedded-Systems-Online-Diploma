
Lecture_Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fe  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026e  00000000  00000000  00000d24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000376  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000072  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define READBIT(register,bit)    ((register>>bit)&1)


int main(void)
{
		SETBIT(DDRD,4);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 62       	ori	r24, 0x20	; 32
  76:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,6);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,7);	
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 68       	ori	r24, 0x80	; 128
  82:	81 bb       	out	0x11, r24	; 17
		uint32_t counter ;
	while (1)
	{
		for (counter=7;counter>=4;counter--)
  84:	47 e0       	ldi	r20, 0x07	; 7
  86:	50 e0       	ldi	r21, 0x00	; 0
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	1d c0       	rjmp	.+58     	; 0xc8 <main+0x5c>
		{
			SETBIT(PORTD,counter);
  8e:	22 b3       	in	r18, 0x12	; 18
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	04 2e       	mov	r0, r20
  96:	02 c0       	rjmp	.+4      	; 0x9c <main+0x30>
  98:	88 0f       	add	r24, r24
  9a:	99 1f       	adc	r25, r25
  9c:	0a 94       	dec	r0
  9e:	e2 f7       	brpl	.-8      	; 0x98 <main+0x2c>
  a0:	92 2f       	mov	r25, r18
  a2:	98 2b       	or	r25, r24
  a4:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f e3       	ldi	r18, 0x3F	; 63
  a8:	32 e4       	ldi	r19, 0x42	; 66
  aa:	ef e0       	ldi	r30, 0x0F	; 15
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	e0 40       	sbci	r30, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x40>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x4a>
  b6:	00 00       	nop
			_delay_ms(5000);
			CLEARBIT(PORTD,counter);
  b8:	92 b3       	in	r25, 0x12	; 18
  ba:	80 95       	com	r24
  bc:	89 23       	and	r24, r25
  be:	82 bb       	out	0x12, r24	; 18
		SETBIT(DDRD,6);
		SETBIT(DDRD,7);	
		uint32_t counter ;
	while (1)
	{
		for (counter=7;counter>=4;counter--)
  c0:	41 50       	subi	r20, 0x01	; 1
  c2:	51 09       	sbc	r21, r1
  c4:	61 09       	sbc	r22, r1
  c6:	71 09       	sbc	r23, r1
  c8:	44 30       	cpi	r20, 0x04	; 4
  ca:	51 05       	cpc	r21, r1
  cc:	61 05       	cpc	r22, r1
  ce:	71 05       	cpc	r23, r1
  d0:	f0 f6       	brcc	.-68     	; 0x8e <main+0x22>
  d2:	d8 cf       	rjmp	.-80     	; 0x84 <main+0x18>

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
