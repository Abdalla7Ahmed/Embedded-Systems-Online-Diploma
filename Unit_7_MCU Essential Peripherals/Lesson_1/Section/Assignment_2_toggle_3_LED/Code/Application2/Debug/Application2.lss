
Application2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cb  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000591  00000000  00000000  0000093f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000333  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  000015b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001713  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4c 00 	call	0x98	; 0x98 <main>
  64:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PORTD_init>:
#define READBIT(register,bit)    ((register>>bit)&1)

void PORTD_init()
{
		// set IODD pin 0,1,2 as an input
		CLEARBIT(DDRD,0);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	8e 7f       	andi	r24, 0xFE	; 254
  70:	81 bb       	out	0x11, r24	; 17
		CLEARBIT(DDRD,1);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8d 7f       	andi	r24, 0xFD	; 253
  76:	81 bb       	out	0x11, r24	; 17
		CLEARBIT(DDRD,2);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	81 bb       	out	0x11, r24	; 17
		
		// set IODD pin 4,5,6,7 as an Output
		SETBIT(DDRD,4);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 61       	ori	r24, 0x10	; 16
  82:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,5);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	80 62       	ori	r24, 0x20	; 32
  88:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,6);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	81 bb       	out	0x11, r24	; 17
		SETBIT(DDRD,7);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	80 68       	ori	r24, 0x80	; 128
  94:	81 bb       	out	0x11, r24	; 17
  96:	08 95       	ret

00000098 <main>:
}
int main(void)
{
    PORTD_init();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <PORTD_init>
	uint32_t flag=0;
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	dc 01       	movw	r26, r24
	while (1)
	{
		if (READBIT(PIND,0)==1)
  a2:	80 9b       	sbis	0x10, 0	; 16
  a4:	6a c0       	rjmp	.+212    	; 0x17a <main+0xe2>
		{
			if (flag==1)
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	91 05       	cpc	r25, r1
  aa:	a1 05       	cpc	r26, r1
  ac:	b1 05       	cpc	r27, r1
  ae:	79 f4       	brne	.+30     	; 0xce <main+0x36>
			{
       			SETBIT(PORTD,5);
  b0:	22 b3       	in	r18, 0x12	; 18
  b2:	20 62       	ori	r18, 0x20	; 32
  b4:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e3       	ldi	r18, 0x3F	; 63
  b8:	32 e4       	ldi	r19, 0x42	; 66
  ba:	4f e0       	ldi	r20, 0x0F	; 15
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	30 40       	sbci	r19, 0x00	; 0
  c0:	40 40       	sbci	r20, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x24>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x2e>
  c6:	00 00       	nop
				_delay_ms(5000);
				while(READBIT(PIND,0)==1);
  c8:	80 99       	sbic	0x10, 0	; 16
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x30>
  cc:	ea cf       	rjmp	.-44     	; 0xa2 <main+0xa>
			}
			else if(flag==2)
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	91 05       	cpc	r25, r1
  d2:	a1 05       	cpc	r26, r1
  d4:	b1 05       	cpc	r27, r1
  d6:	79 f4       	brne	.+30     	; 0xf6 <main+0x5e>
			{
				SETBIT(PORTD,6);
  d8:	22 b3       	in	r18, 0x12	; 18
  da:	20 64       	ori	r18, 0x40	; 64
  dc:	22 bb       	out	0x12, r18	; 18
  de:	2f e3       	ldi	r18, 0x3F	; 63
  e0:	32 e4       	ldi	r19, 0x42	; 66
  e2:	4f e0       	ldi	r20, 0x0F	; 15
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x4c>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x56>
  ee:	00 00       	nop
				_delay_ms(5000);
				while(READBIT(PIND,0)==1);
  f0:	80 99       	sbic	0x10, 0	; 16
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <main+0x58>
  f4:	d6 cf       	rjmp	.-84     	; 0xa2 <main+0xa>
			}
		    else if(flag==3)
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	91 05       	cpc	r25, r1
  fa:	a1 05       	cpc	r26, r1
  fc:	b1 05       	cpc	r27, r1
  fe:	79 f4       	brne	.+30     	; 0x11e <main+0x86>
			{
				SETBIT(PORTD,7);
 100:	22 b3       	in	r18, 0x12	; 18
 102:	20 68       	ori	r18, 0x80	; 128
 104:	22 bb       	out	0x12, r18	; 18
 106:	2f e3       	ldi	r18, 0x3F	; 63
 108:	32 e4       	ldi	r19, 0x42	; 66
 10a:	4f e0       	ldi	r20, 0x0F	; 15
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	30 40       	sbci	r19, 0x00	; 0
 110:	40 40       	sbci	r20, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x74>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x7e>
 116:	00 00       	nop
				_delay_ms(5000);
				while(READBIT(PIND,0)==1);
 118:	80 99       	sbic	0x10, 0	; 16
 11a:	fe cf       	rjmp	.-4      	; 0x118 <main+0x80>
 11c:	c2 cf       	rjmp	.-124    	; 0xa2 <main+0xa>
			}
		    else if(flag==4)
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	91 05       	cpc	r25, r1
 122:	a1 05       	cpc	r26, r1
 124:	b1 05       	cpc	r27, r1
 126:	79 f4       	brne	.+30     	; 0x146 <main+0xae>
		    {
			    SETBIT(PORTD,4);
 128:	22 b3       	in	r18, 0x12	; 18
 12a:	20 61       	ori	r18, 0x10	; 16
 12c:	22 bb       	out	0x12, r18	; 18
 12e:	2f e3       	ldi	r18, 0x3F	; 63
 130:	32 e4       	ldi	r19, 0x42	; 66
 132:	4f e0       	ldi	r20, 0x0F	; 15
 134:	21 50       	subi	r18, 0x01	; 1
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	40 40       	sbci	r20, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x9c>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0xa6>
 13e:	00 00       	nop
				_delay_ms(5000);
				while(READBIT(PIND,0)==1);
 140:	80 99       	sbic	0x10, 0	; 16
 142:	fe cf       	rjmp	.-4      	; 0x140 <main+0xa8>
 144:	ae cf       	rjmp	.-164    	; 0xa2 <main+0xa>
		    }
			else if (flag==5)
 146:	85 30       	cpi	r24, 0x05	; 5
 148:	91 05       	cpc	r25, r1
 14a:	a1 05       	cpc	r26, r1
 14c:	b1 05       	cpc	r27, r1
 14e:	79 f4       	brne	.+30     	; 0x16e <main+0xd6>
			{
				CLEARBIT(PORTD,4);
 150:	22 b3       	in	r18, 0x12	; 18
 152:	2f 7e       	andi	r18, 0xEF	; 239
 154:	22 bb       	out	0x12, r18	; 18
				CLEARBIT(PORTD,7);
 156:	22 b3       	in	r18, 0x12	; 18
 158:	2f 77       	andi	r18, 0x7F	; 127
 15a:	22 bb       	out	0x12, r18	; 18
				CLEARBIT(PORTD,6);
 15c:	22 b3       	in	r18, 0x12	; 18
 15e:	2f 7b       	andi	r18, 0xBF	; 191
 160:	22 bb       	out	0x12, r18	; 18
				CLEARBIT(PORTD,5);
 162:	22 b3       	in	r18, 0x12	; 18
 164:	2f 7d       	andi	r18, 0xDF	; 223
 166:	22 bb       	out	0x12, r18	; 18
				while(READBIT(PIND,0)==1);
 168:	80 99       	sbic	0x10, 0	; 16
 16a:	fe cf       	rjmp	.-4      	; 0x168 <main+0xd0>
 16c:	9a cf       	rjmp	.-204    	; 0xa2 <main+0xa>
			}
			else 
			{
				flag=0;
				while(READBIT(PIND,0)==1);
 16e:	80 99       	sbic	0x10, 0	; 16
 170:	fe cf       	rjmp	.-4      	; 0x16e <main+0xd6>
				CLEARBIT(PORTD,5);
				while(READBIT(PIND,0)==1);
			}
			else 
			{
				flag=0;
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	dc 01       	movw	r26, r24
 178:	94 cf       	rjmp	.-216    	; 0xa2 <main+0xa>
				while(READBIT(PIND,0)==1);
			}
		}
		else
		{
			flag++;
 17a:	01 96       	adiw	r24, 0x01	; 1
 17c:	a1 1d       	adc	r26, r1
 17e:	b1 1d       	adc	r27, r1
			while(READBIT(PIND,0)==0);
 180:	80 9b       	sbis	0x10, 0	; 16
 182:	fe cf       	rjmp	.-4      	; 0x180 <main+0xe8>
 184:	8e cf       	rjmp	.-228    	; 0xa2 <main+0xa>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
