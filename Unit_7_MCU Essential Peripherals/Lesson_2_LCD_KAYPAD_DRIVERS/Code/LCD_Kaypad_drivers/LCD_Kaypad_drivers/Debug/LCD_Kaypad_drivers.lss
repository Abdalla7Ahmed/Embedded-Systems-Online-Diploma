
LCD_Kaypad_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  000003fe  00000472  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c75  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077c  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000770  00000000  00000000  000019a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001bc  00000000  00000000  00002114  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fb  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000647  00000000  00000000  000027cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
  7a:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KAYPAD_INIT>:
uint32_t Kaypad_Row[]={R0,R1,R2,R3};

void KAYPAD_INIT()
{
	// set column as an output
	SETBIT(Data_Dir_KAYPAD_PORT,C0);
  82:	81 b3       	in	r24, 0x11	; 17
  84:	80 61       	ori	r24, 0x10	; 16
  86:	81 bb       	out	0x11, r24	; 17
	SETBIT(Data_Dir_KAYPAD_PORT,C1);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	81 bb       	out	0x11, r24	; 17
	SETBIT(Data_Dir_KAYPAD_PORT,C2);
  8e:	81 b3       	in	r24, 0x11	; 17
  90:	80 64       	ori	r24, 0x40	; 64
  92:	81 bb       	out	0x11, r24	; 17
	SETBIT(Data_Dir_KAYPAD_PORT,C3);
  94:	81 b3       	in	r24, 0x11	; 17
  96:	80 68       	ori	r24, 0x80	; 128
  98:	81 bb       	out	0x11, r24	; 17
	// set rows as an input
	CLEARBIT(Data_Dir_KAYPAD_PORT,R0);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8e 7f       	andi	r24, 0xFE	; 254
  9e:	81 bb       	out	0x11, r24	; 17
	CLEARBIT(Data_Dir_KAYPAD_PORT,R1);
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	8d 7f       	andi	r24, 0xFD	; 253
  a4:	81 bb       	out	0x11, r24	; 17
	CLEARBIT(Data_Dir_KAYPAD_PORT,R2);
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	8b 7f       	andi	r24, 0xFB	; 251
  aa:	81 bb       	out	0x11, r24	; 17
	CLEARBIT(Data_Dir_KAYPAD_PORT,R3);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	81 bb       	out	0x11, r24	; 17
	
	KAYPAD_PORT =0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	82 bb       	out	0x12, r24	; 18
  b6:	08 95       	ret

000000b8 <GET_CHARACTER>:



}
char GET_CHARACTER()
{
  b8:	cf 92       	push	r12
  ba:	df 92       	push	r13
  bc:	ef 92       	push	r14
  be:	ff 92       	push	r15
	uint32_t i,j;
	for (i=0;i<4;i++)
  c0:	c1 2c       	mov	r12, r1
  c2:	d1 2c       	mov	r13, r1
  c4:	76 01       	movw	r14, r12
  c6:	df c0       	rjmp	.+446    	; 0x286 <GET_CHARACTER+0x1ce>
	{
		SETBIT(KAYPAD_PORT,Kaypad_column[0]);
  c8:	42 b3       	in	r20, 0x12	; 18
  ca:	e0 e7       	ldi	r30, 0x70	; 112
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	9c 01       	movw	r18, r24
  d4:	00 80       	ld	r0, Z
  d6:	02 c0       	rjmp	.+4      	; 0xdc <GET_CHARACTER+0x24>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <GET_CHARACTER+0x20>
  e0:	24 2b       	or	r18, r20
  e2:	22 bb       	out	0x12, r18	; 18
		SETBIT(KAYPAD_PORT,Kaypad_column[1]);
  e4:	42 b3       	in	r20, 0x12	; 18
  e6:	9c 01       	movw	r18, r24
  e8:	04 80       	ldd	r0, Z+4	; 0x04
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GET_CHARACTER+0x38>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	0a 94       	dec	r0
  f2:	e2 f7       	brpl	.-8      	; 0xec <GET_CHARACTER+0x34>
  f4:	24 2b       	or	r18, r20
  f6:	22 bb       	out	0x12, r18	; 18
		SETBIT(KAYPAD_PORT,Kaypad_column[2]);
  f8:	42 b3       	in	r20, 0x12	; 18
  fa:	9c 01       	movw	r18, r24
  fc:	00 84       	ldd	r0, Z+8	; 0x08
  fe:	02 c0       	rjmp	.+4      	; 0x104 <GET_CHARACTER+0x4c>
 100:	22 0f       	add	r18, r18
 102:	33 1f       	adc	r19, r19
 104:	0a 94       	dec	r0
 106:	e2 f7       	brpl	.-8      	; 0x100 <GET_CHARACTER+0x48>
 108:	24 2b       	or	r18, r20
 10a:	22 bb       	out	0x12, r18	; 18
		SETBIT(KAYPAD_PORT,Kaypad_column[3]);
 10c:	42 b3       	in	r20, 0x12	; 18
 10e:	9c 01       	movw	r18, r24
 110:	04 84       	ldd	r0, Z+12	; 0x0c
 112:	02 c0       	rjmp	.+4      	; 0x118 <GET_CHARACTER+0x60>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	0a 94       	dec	r0
 11a:	e2 f7       	brpl	.-8      	; 0x114 <GET_CHARACTER+0x5c>
 11c:	24 2b       	or	r18, r20
 11e:	22 bb       	out	0x12, r18	; 18
		CLEARBIT(KAYPAD_PORT,Kaypad_column[i]);
 120:	22 b3       	in	r18, 0x12	; 18
 122:	f6 01       	movw	r30, r12
 124:	ee 0f       	add	r30, r30
 126:	ff 1f       	adc	r31, r31
 128:	ee 0f       	add	r30, r30
 12a:	ff 1f       	adc	r31, r31
 12c:	e0 59       	subi	r30, 0x90	; 144
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	00 80       	ld	r0, Z
 132:	02 c0       	rjmp	.+4      	; 0x138 <GET_CHARACTER+0x80>
 134:	88 0f       	add	r24, r24
 136:	99 1f       	adc	r25, r25
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <GET_CHARACTER+0x7c>
 13c:	80 95       	com	r24
 13e:	82 23       	and	r24, r18
 140:	82 bb       	out	0x12, r24	; 18
		for (j=0;j<4;j++)
 142:	40 e0       	ldi	r20, 0x00	; 0
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	ba 01       	movw	r22, r20
 148:	93 c0       	rjmp	.+294    	; 0x270 <GET_CHARACTER+0x1b8>
		{
			if (READBIT(KAYPAD_PIN,Kaypad_Row[j])==0)
 14a:	80 b3       	in	r24, 0x10	; 16
 14c:	fa 01       	movw	r30, r20
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ee 0f       	add	r30, r30
 154:	ff 1f       	adc	r31, r31
 156:	e0 5a       	subi	r30, 0xA0	; 160
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	30 81       	ld	r19, Z
 15c:	23 2f       	mov	r18, r19
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <GET_CHARACTER+0xae>
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	3a 95       	dec	r19
 168:	e2 f7       	brpl	.-8      	; 0x162 <GET_CHARACTER+0xaa>
 16a:	80 fd       	sbrc	r24, 0
 16c:	7d c0       	rjmp	.+250    	; 0x268 <GET_CHARACTER+0x1b0>
			{
				while (READBIT(KAYPAD_PIN,Kaypad_Row[j])==0);
 16e:	80 b3       	in	r24, 0x10	; 16
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <GET_CHARACTER+0xc2>
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <GET_CHARACTER+0xbe>
 17e:	80 ff       	sbrs	r24, 0
 180:	f6 cf       	rjmp	.-20     	; 0x16e <GET_CHARACTER+0xb6>
				switch(i)
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	c8 16       	cp	r12, r24
 186:	d1 04       	cpc	r13, r1
 188:	e1 04       	cpc	r14, r1
 18a:	f1 04       	cpc	r15, r1
 18c:	41 f1       	breq	.+80     	; 0x1de <GET_CHARACTER+0x126>
 18e:	70 f0       	brcs	.+28     	; 0x1ac <GET_CHARACTER+0xf4>
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	c8 16       	cp	r12, r24
 194:	d1 04       	cpc	r13, r1
 196:	e1 04       	cpc	r14, r1
 198:	f1 04       	cpc	r15, r1
 19a:	c9 f1       	breq	.+114    	; 0x20e <GET_CHARACTER+0x156>
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	c8 16       	cp	r12, r24
 1a0:	d1 04       	cpc	r13, r1
 1a2:	e1 04       	cpc	r14, r1
 1a4:	f1 04       	cpc	r15, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <GET_CHARACTER+0xf2>
 1a8:	4a c0       	rjmp	.+148    	; 0x23e <GET_CHARACTER+0x186>
 1aa:	5e c0       	rjmp	.+188    	; 0x268 <GET_CHARACTER+0x1b0>
				{
					case 0:
					{
						if (j==0)     return '7';
 1ac:	41 15       	cp	r20, r1
 1ae:	51 05       	cpc	r21, r1
 1b0:	61 05       	cpc	r22, r1
 1b2:	71 05       	cpc	r23, r1
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <GET_CHARACTER+0x100>
 1b6:	70 c0       	rjmp	.+224    	; 0x298 <GET_CHARACTER+0x1e0>
						else if (j==1)return '4';
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	51 05       	cpc	r21, r1
 1bc:	61 05       	cpc	r22, r1
 1be:	71 05       	cpc	r23, r1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <GET_CHARACTER+0x10c>
 1c2:	6c c0       	rjmp	.+216    	; 0x29c <GET_CHARACTER+0x1e4>
						else if (j==2)return '1';
 1c4:	42 30       	cpi	r20, 0x02	; 2
 1c6:	51 05       	cpc	r21, r1
 1c8:	61 05       	cpc	r22, r1
 1ca:	71 05       	cpc	r23, r1
 1cc:	09 f4       	brne	.+2      	; 0x1d0 <GET_CHARACTER+0x118>
 1ce:	68 c0       	rjmp	.+208    	; 0x2a0 <GET_CHARACTER+0x1e8>
						else if (j==3)return 'C';
 1d0:	43 30       	cpi	r20, 0x03	; 3
 1d2:	51 05       	cpc	r21, r1
 1d4:	61 05       	cpc	r22, r1
 1d6:	71 05       	cpc	r23, r1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <GET_CHARACTER+0x124>
 1da:	46 c0       	rjmp	.+140    	; 0x268 <GET_CHARACTER+0x1b0>
 1dc:	63 c0       	rjmp	.+198    	; 0x2a4 <GET_CHARACTER+0x1ec>
						break;
					}
					case 1:
					{
						if (j==0)     return '8';
 1de:	41 15       	cp	r20, r1
 1e0:	51 05       	cpc	r21, r1
 1e2:	61 05       	cpc	r22, r1
 1e4:	71 05       	cpc	r23, r1
 1e6:	09 f4       	brne	.+2      	; 0x1ea <GET_CHARACTER+0x132>
 1e8:	5f c0       	rjmp	.+190    	; 0x2a8 <GET_CHARACTER+0x1f0>
						else if (j==1)return '5';
 1ea:	41 30       	cpi	r20, 0x01	; 1
 1ec:	51 05       	cpc	r21, r1
 1ee:	61 05       	cpc	r22, r1
 1f0:	71 05       	cpc	r23, r1
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <GET_CHARACTER+0x13e>
 1f4:	5b c0       	rjmp	.+182    	; 0x2ac <GET_CHARACTER+0x1f4>
						else if (j==2)return '2';
 1f6:	42 30       	cpi	r20, 0x02	; 2
 1f8:	51 05       	cpc	r21, r1
 1fa:	61 05       	cpc	r22, r1
 1fc:	71 05       	cpc	r23, r1
 1fe:	09 f4       	brne	.+2      	; 0x202 <GET_CHARACTER+0x14a>
 200:	57 c0       	rjmp	.+174    	; 0x2b0 <GET_CHARACTER+0x1f8>
						else if (j==3)return '0';
 202:	43 30       	cpi	r20, 0x03	; 3
 204:	51 05       	cpc	r21, r1
 206:	61 05       	cpc	r22, r1
 208:	71 05       	cpc	r23, r1
 20a:	71 f5       	brne	.+92     	; 0x268 <GET_CHARACTER+0x1b0>
 20c:	53 c0       	rjmp	.+166    	; 0x2b4 <GET_CHARACTER+0x1fc>
						break;
					}
					case 2:
					{
						if (j==0)     return '9';
 20e:	41 15       	cp	r20, r1
 210:	51 05       	cpc	r21, r1
 212:	61 05       	cpc	r22, r1
 214:	71 05       	cpc	r23, r1
 216:	09 f4       	brne	.+2      	; 0x21a <GET_CHARACTER+0x162>
 218:	4f c0       	rjmp	.+158    	; 0x2b8 <GET_CHARACTER+0x200>
						else if (j==1)return '6';
 21a:	41 30       	cpi	r20, 0x01	; 1
 21c:	51 05       	cpc	r21, r1
 21e:	61 05       	cpc	r22, r1
 220:	71 05       	cpc	r23, r1
 222:	09 f4       	brne	.+2      	; 0x226 <GET_CHARACTER+0x16e>
 224:	4b c0       	rjmp	.+150    	; 0x2bc <GET_CHARACTER+0x204>
						else if (j==2)return '3';
 226:	42 30       	cpi	r20, 0x02	; 2
 228:	51 05       	cpc	r21, r1
 22a:	61 05       	cpc	r22, r1
 22c:	71 05       	cpc	r23, r1
 22e:	09 f4       	brne	.+2      	; 0x232 <GET_CHARACTER+0x17a>
 230:	47 c0       	rjmp	.+142    	; 0x2c0 <GET_CHARACTER+0x208>
						else if (j==3)return '=';
 232:	43 30       	cpi	r20, 0x03	; 3
 234:	51 05       	cpc	r21, r1
 236:	61 05       	cpc	r22, r1
 238:	71 05       	cpc	r23, r1
 23a:	b1 f4       	brne	.+44     	; 0x268 <GET_CHARACTER+0x1b0>
 23c:	43 c0       	rjmp	.+134    	; 0x2c4 <GET_CHARACTER+0x20c>
						break;
					}
					case 3:
					{
						if (j==0)     return '/';
 23e:	41 15       	cp	r20, r1
 240:	51 05       	cpc	r21, r1
 242:	61 05       	cpc	r22, r1
 244:	71 05       	cpc	r23, r1
 246:	09 f4       	brne	.+2      	; 0x24a <GET_CHARACTER+0x192>
 248:	3f c0       	rjmp	.+126    	; 0x2c8 <GET_CHARACTER+0x210>
						else if (j==1)return '*';
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	51 05       	cpc	r21, r1
 24e:	61 05       	cpc	r22, r1
 250:	71 05       	cpc	r23, r1
 252:	e1 f1       	breq	.+120    	; 0x2cc <GET_CHARACTER+0x214>
						else if (j==2)return '-';
 254:	42 30       	cpi	r20, 0x02	; 2
 256:	51 05       	cpc	r21, r1
 258:	61 05       	cpc	r22, r1
 25a:	71 05       	cpc	r23, r1
 25c:	c9 f1       	breq	.+114    	; 0x2d0 <GET_CHARACTER+0x218>
						else if (j==3)return '+';
 25e:	43 30       	cpi	r20, 0x03	; 3
 260:	51 05       	cpc	r21, r1
 262:	61 05       	cpc	r22, r1
 264:	71 05       	cpc	r23, r1
 266:	b1 f1       	breq	.+108    	; 0x2d4 <GET_CHARACTER+0x21c>
		SETBIT(KAYPAD_PORT,Kaypad_column[0]);
		SETBIT(KAYPAD_PORT,Kaypad_column[1]);
		SETBIT(KAYPAD_PORT,Kaypad_column[2]);
		SETBIT(KAYPAD_PORT,Kaypad_column[3]);
		CLEARBIT(KAYPAD_PORT,Kaypad_column[i]);
		for (j=0;j<4;j++)
 268:	4f 5f       	subi	r20, 0xFF	; 255
 26a:	5f 4f       	sbci	r21, 0xFF	; 255
 26c:	6f 4f       	sbci	r22, 0xFF	; 255
 26e:	7f 4f       	sbci	r23, 0xFF	; 255
 270:	44 30       	cpi	r20, 0x04	; 4
 272:	51 05       	cpc	r21, r1
 274:	61 05       	cpc	r22, r1
 276:	71 05       	cpc	r23, r1
 278:	08 f4       	brcc	.+2      	; 0x27c <GET_CHARACTER+0x1c4>
 27a:	67 cf       	rjmp	.-306    	; 0x14a <GET_CHARACTER+0x92>

}
char GET_CHARACTER()
{
	uint32_t i,j;
	for (i=0;i<4;i++)
 27c:	8f ef       	ldi	r24, 0xFF	; 255
 27e:	c8 1a       	sub	r12, r24
 280:	d8 0a       	sbc	r13, r24
 282:	e8 0a       	sbc	r14, r24
 284:	f8 0a       	sbc	r15, r24
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	c8 16       	cp	r12, r24
 28a:	d1 04       	cpc	r13, r1
 28c:	e1 04       	cpc	r14, r1
 28e:	f1 04       	cpc	r15, r1
 290:	08 f4       	brcc	.+2      	; 0x294 <GET_CHARACTER+0x1dc>
 292:	1a cf       	rjmp	.-460    	; 0xc8 <GET_CHARACTER+0x10>
				}
			}
		}
		
	}
	return 'N'; // return null 
 294:	8e e4       	ldi	r24, 0x4E	; 78
 296:	1f c0       	rjmp	.+62     	; 0x2d6 <GET_CHARACTER+0x21e>
				while (READBIT(KAYPAD_PIN,Kaypad_Row[j])==0);
				switch(i)
				{
					case 0:
					{
						if (j==0)     return '7';
 298:	87 e3       	ldi	r24, 0x37	; 55
 29a:	1d c0       	rjmp	.+58     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==1)return '4';
 29c:	84 e3       	ldi	r24, 0x34	; 52
 29e:	1b c0       	rjmp	.+54     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==2)return '1';
 2a0:	81 e3       	ldi	r24, 0x31	; 49
 2a2:	19 c0       	rjmp	.+50     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==3)return 'C';
 2a4:	83 e4       	ldi	r24, 0x43	; 67
 2a6:	17 c0       	rjmp	.+46     	; 0x2d6 <GET_CHARACTER+0x21e>
						break;
					}
					case 1:
					{
						if (j==0)     return '8';
 2a8:	88 e3       	ldi	r24, 0x38	; 56
 2aa:	15 c0       	rjmp	.+42     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==1)return '5';
 2ac:	85 e3       	ldi	r24, 0x35	; 53
 2ae:	13 c0       	rjmp	.+38     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==2)return '2';
 2b0:	82 e3       	ldi	r24, 0x32	; 50
 2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==3)return '0';
 2b4:	80 e3       	ldi	r24, 0x30	; 48
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <GET_CHARACTER+0x21e>
						break;
					}
					case 2:
					{
						if (j==0)     return '9';
 2b8:	89 e3       	ldi	r24, 0x39	; 57
 2ba:	0d c0       	rjmp	.+26     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==1)return '6';
 2bc:	86 e3       	ldi	r24, 0x36	; 54
 2be:	0b c0       	rjmp	.+22     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==2)return '3';
 2c0:	83 e3       	ldi	r24, 0x33	; 51
 2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==3)return '=';
 2c4:	8d e3       	ldi	r24, 0x3D	; 61
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <GET_CHARACTER+0x21e>
						break;
					}
					case 3:
					{
						if (j==0)     return '/';
 2c8:	8f e2       	ldi	r24, 0x2F	; 47
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==1)return '*';
 2cc:	8a e2       	ldi	r24, 0x2A	; 42
 2ce:	03 c0       	rjmp	.+6      	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==2)return '-';
 2d0:	8d e2       	ldi	r24, 0x2D	; 45
 2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <GET_CHARACTER+0x21e>
						else if (j==3)return '+';
 2d4:	8b e2       	ldi	r24, 0x2B	; 43
			}
		}
		
	}
	return 'N'; // return null 
}
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	df 90       	pop	r13
 2dc:	cf 90       	pop	r12
 2de:	08 95       	ret

000002e0 <LCD_lcd_kick>:
    DataDir_LCD_PORT =0xFF;
	CLEARBIT(LCD_CTRL,RW_SWITCH); // Write mood
}
void LCD_lcd_kick(void)
{
	CLEARBIT(LCD_CTRL,EN_SWITCH);
 2e0:	88 b3       	in	r24, 0x18	; 24
 2e2:	8e 7f       	andi	r24, 0xFE	; 254
 2e4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	83 ed       	ldi	r24, 0xD3	; 211
 2e8:	90 e3       	ldi	r25, 0x30	; 48
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_lcd_kick+0xa>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_lcd_kick+0x10>
 2f0:	00 00       	nop
	_delay_ms(50);
	SETBIT(LCD_CTRL,EN_SWITCH);
 2f2:	88 b3       	in	r24, 0x18	; 24
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	88 bb       	out	0x18, r24	; 24
 2f8:	08 95       	ret

000002fa <LCD_check_lcd_isbusy>:

}

void LCD_check_lcd_isbusy(void)
{
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
 2fa:	8a b3       	in	r24, 0x1a	; 26
 2fc:	1a ba       	out	0x1a, r1	; 26
	SETBIT(LCD_CTRL,RW_SWITCH); // read mood
 2fe:	88 b3       	in	r24, 0x18	; 24
 300:	82 60       	ori	r24, 0x02	; 2
 302:	88 bb       	out	0x18, r24	; 24
	CLEARBIT(LCD_CTRL,RS_SWITCH);
 304:	88 b3       	in	r24, 0x18	; 24
 306:	8b 7f       	andi	r24, 0xFB	; 251
 308:	88 bb       	out	0x18, r24	; 24
    LCD_lcd_kick();
 30a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_lcd_kick>
    DataDir_LCD_PORT =0xFF;
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	8a bb       	out	0x1a, r24	; 26
	CLEARBIT(LCD_CTRL,RW_SWITCH); // Write mood
 312:	88 b3       	in	r24, 0x18	; 24
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	88 bb       	out	0x18, r24	; 24
 318:	08 95       	ret

0000031a <LCD_WRITE_COMMAND>:
    	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
    	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);

}
void LCD_WRITE_COMMAND(unsigned char command)
{
 31a:	cf 93       	push	r28
 31c:	c8 2f       	mov	r28, r24
	LCD_check_lcd_isbusy();
 31e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_check_lcd_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_PORT = command;
 322:	cb bb       	out	0x1b, r28	; 27
		CLEARBIT(LCD_CTRL,RW_SWITCH);
 324:	88 b3       	in	r24, 0x18	; 24
 326:	8d 7f       	andi	r24, 0xFD	; 253
 328:	88 bb       	out	0x18, r24	; 24
		CLEARBIT(LCD_CTRL,RS_SWITCH);
 32a:	88 b3       	in	r24, 0x18	; 24
 32c:	8b 7f       	andi	r24, 0xFB	; 251
 32e:	88 bb       	out	0x18, r24	; 24
 330:	89 ef       	ldi	r24, 0xF9	; 249
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_WRITE_COMMAND+0x1a>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_WRITE_COMMAND+0x20>
 33a:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();	
 33c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_lcd_kick>
		CLEARBIT(LCD_CTRL,RW_SWITCH);
		CLEARBIT(LCD_CTRL,RS_SWITCH);
		LCD_lcd_kick();	
	 #endif

}
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 344:	cf 93       	push	r28
 346:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 348:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 34c:	cb bb       	out	0x1b, r28	; 27
		CLEARBIT(LCD_CTRL,RW_SWITCH);
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	88 bb       	out	0x18, r24	; 24
		SETBIT(LCD_CTRL,RS_SWITCH);
 354:	88 b3       	in	r24, 0x18	; 24
 356:	84 60       	ori	r24, 0x04	; 4
 358:	88 bb       	out	0x18, r24	; 24
 35a:	89 ef       	ldi	r24, 0xF9	; 249
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	01 97       	sbiw	r24, 0x01	; 1
 360:	f1 f7       	brne	.-4      	; 0x35e <LCD_WRITE_CHAR+0x1a>
 362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_WRITE_CHAR+0x20>
 364:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
 366:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LCD_lcd_kick>
		SETBIT(LCD_CTRL,RS_SWITCH);
		CLEARBIT(LCD_CTRL,RW_SWITCH);
		LCD_lcd_kick();
    #endif

}
 36a:	cf 91       	pop	r28
 36c:	08 95       	ret

0000036e <LCD_clear_screen>:
	_delay_ms(50);
	SETBIT(LCD_CTRL,EN_SWITCH);
}
void LCD_clear_screen()
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_WRITE_COMMAND>
 374:	08 95       	ret

00000376 <LCD_INIT>:
 376:	87 e8       	ldi	r24, 0x87	; 135
 378:	93 e1       	ldi	r25, 0x13	; 19
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_INIT+0x4>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_INIT+0xa>
 380:	00 00       	nop
#include "lcd.h"

void LCD_INIT()
{
	_delay_ms(20);
	LCD_check_lcd_isbusy();
 382:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_check_lcd_isbusy>
	SETBIT(DataDir_LCD_CTRL,EN_SWITCH);
 386:	87 b3       	in	r24, 0x17	; 23
 388:	81 60       	ori	r24, 0x01	; 1
 38a:	87 bb       	out	0x17, r24	; 23
	SETBIT(DataDir_LCD_CTRL,RW_SWITCH);
 38c:	87 b3       	in	r24, 0x17	; 23
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	87 bb       	out	0x17, r24	; 23
	SETBIT(DataDir_LCD_CTRL,RS_SWITCH);
 392:	87 b3       	in	r24, 0x17	; 23
 394:	84 60       	ori	r24, 0x04	; 4
 396:	87 bb       	out	0x17, r24	; 23
		
	CLEARBIT(LCD_CTRL,EN_SWITCH);
 398:	88 b3       	in	r24, 0x18	; 24
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	88 bb       	out	0x18, r24	; 24
	CLEARBIT(LCD_CTRL,RS_SWITCH);
 39e:	88 b3       	in	r24, 0x18	; 24
 3a0:	8b 7f       	andi	r24, 0xFB	; 251
 3a2:	88 bb       	out	0x18, r24	; 24
	CLEARBIT(LCD_CTRL,RW_SWITCH);
 3a4:	88 b3       	in	r24, 0x18	; 24
 3a6:	8d 7f       	andi	r24, 0xFD	; 253
 3a8:	88 bb       	out	0x18, r24	; 24
		
	DataDir_LCD_PORT=0xFF;
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	8a bb       	out	0x1a, r24	; 26
 3ae:	85 ea       	ldi	r24, 0xA5	; 165
 3b0:	9e e0       	ldi	r25, 0x0E	; 14
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_INIT+0x3c>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_INIT+0x42>
 3b8:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();	
 3ba:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 3be:	88 e3       	ldi	r24, 0x38	; 56
 3c0:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_WRITE_COMMAND>
   #endif
   #ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(0x02);
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
   #endif
    	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 3c4:	86 e0       	ldi	r24, 0x06	; 6
 3c6:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_WRITE_COMMAND>
    	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 3ca:	80 e8       	ldi	r24, 0x80	; 128
 3cc:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_WRITE_COMMAND>
    	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 3d0:	8f e0       	ldi	r24, 0x0F	; 15
 3d2:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_WRITE_COMMAND>
 3d6:	08 95       	ret

000003d8 <main>:
#include <avr/io.h>
#include "LCD_driver/LCD.h"
#include "Kaypad_driver/Kaypad.h"
int main(void)
{
	LCD_INIT();
 3d8:	0e 94 bb 01 	call	0x376	; 0x376 <LCD_INIT>
	KAYPAD_INIT();
 3dc:	0e 94 41 00 	call	0x82	; 0x82 <KAYPAD_INIT>
			//_delay_ms(300);
			//LCD_clear_screen();
			//LCD_WRITE_STRING("third year ");
			//_delay_ms(300);
			//LCD_clear_screen();
			Pressed_kay =GET_CHARACTER();
 3e0:	0e 94 5c 00 	call	0xb8	; 0xb8 <GET_CHARACTER>
			switch(Pressed_kay)
 3e4:	83 34       	cpi	r24, 0x43	; 67
 3e6:	19 f0       	breq	.+6      	; 0x3ee <main+0x16>
 3e8:	8e 34       	cpi	r24, 0x4E	; 78
 3ea:	d1 f3       	breq	.-12     	; 0x3e0 <main+0x8>
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <main+0x1c>
			{
				case 'C':
					LCD_clear_screen();
 3ee:	0e 94 b7 01 	call	0x36e	; 0x36e <LCD_clear_screen>
					break;
 3f2:	f6 cf       	rjmp	.-20     	; 0x3e0 <main+0x8>
				case 'N' : 
					break;
				default:
					LCD_WRITE_CHAR(Pressed_kay);
 3f4:	0e 94 a2 01 	call	0x344	; 0x344 <LCD_WRITE_CHAR>
					break;
 3f8:	f3 cf       	rjmp	.-26     	; 0x3e0 <main+0x8>

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
