
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000440  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  4 .ARM          00000000  08000570  08000570  00010578  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000570  08000578  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000570  08000570  00010570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000574  08000574  00010574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000578  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000578  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010578  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001936  00000000  00000000  000105a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000407  00000000  00000000  00011ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000049c  00000000  00000000  000122de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000c8  00000000  00000000  00012780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  00012848  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001f8d  00000000  00000000  000128e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000e53  00000000  00000000  00014875  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000883a  00000000  00000000  000156c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001df02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000260  00000000  00000000  0001df80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000558 	.word	0x08000558

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000558 	.word	0x08000558

08000170 <Get_CRLH_position>:
 *      Author: Abotaleb
 */

#include "STM32F103C6_Driver.h"
uint8_t Get_CRLH_position (uint16_t pinNumber)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <Get_CRLH_position+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <Get_CRLH_position+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <Get_CRLH_position+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <Get_CRLH_position+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <Get_CRLH_position+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <Get_CRLH_position+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <Get_CRLH_position+0x7a>
 8000198:	e047      	b.n	800022a <Get_CRLH_position+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <Get_CRLH_position+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <Get_CRLH_position+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <Get_CRLH_position+0x8a>
 80001a6:	e040      	b.n	800022a <Get_CRLH_position+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <Get_CRLH_position+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <Get_CRLH_position+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <Get_CRLH_position+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <Get_CRLH_position+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <Get_CRLH_position+0x9a>
 80001c6:	e030      	b.n	800022a <Get_CRLH_position+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <Get_CRLH_position+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <Get_CRLH_position+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <Get_CRLH_position+0xaa>
 80001da:	e026      	b.n	800022a <Get_CRLH_position+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <Get_CRLH_position+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <Get_CRLH_position+0xb6>
 80001e8:	e01f      	b.n	800022a <Get_CRLH_position+0xba>
	{
	case GPIO_PINS_0:
		return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01e      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_1:
		return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01c      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_2:
		return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01a      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_3:
		return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e018      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_4:
		return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e016      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_5:
		return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e014      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_6:
		return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e012      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_7:
		return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e010      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_8:
		return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00e      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_9:
		return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00c      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_10:
		return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00a      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_11:
		return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e008      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_12:
		return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e006      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_13:
		return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e004      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_14:
		return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e002      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	case GPIO_PINS_15:
		return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e000      	b.n	800022c <Get_CRLH_position+0xbc>
		break;
	}
	return 0;
 800022a:	2300      	movs	r3, #0
}
 800022c:	4618      	mov	r0, r3
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	bc80      	pop	{r7}
 8000234:	4770      	bx	lr

08000236 <MCAL_GPIO_INIT>:
 * @retval	  - none
 * Note		  - stm32f103c6 MCU has GPIOz [z one of A ,B , C ,D ,E]
 * 			   but LQFP48 Package has only GPIOA , GPIOB and Partial of GPIOC , GPIOD
================================================================**/
void MCAL_GPIO_INIT(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000236:	b590      	push	{r4, r7, lr}
 8000238:	b085      	sub	sp, #20
 800023a:	af00      	add	r7, sp, #0
 800023c:	6078      	str	r0, [r7, #4]
 800023e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) pin 0 to 7
	//Port configuration register High (GPIOx_CRL) (x=A..G) pin 8 to 15
	volatile uint32_t *ConfigRegister = NULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;
 8000244:	2300      	movs	r3, #0
 8000246:	73fb      	strb	r3, [r7, #15]
	// check for set the pointer to CRL or CRH
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PINS_8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	881b      	ldrh	r3, [r3, #0]
 800024c:	2bff      	cmp	r3, #255	; 0xff
 800024e:	d801      	bhi.n	8000254 <MCAL_GPIO_INIT+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	e001      	b.n	8000258 <MCAL_GPIO_INIT+0x22>
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	3304      	adds	r3, #4
 8000258:	60bb      	str	r3, [r7, #8]
	// clear CNF[1:0] MODE[1:0]
	(*ConfigRegister) &= ~(0xF<<Get_CRLH_position(PinConfig->GPIO_PinNumber));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <Get_CRLH_position>
 8000264:	4603      	mov	r3, r0
 8000266:	461a      	mov	r2, r3
 8000268:	230f      	movs	r3, #15
 800026a:	4093      	lsls	r3, r2
 800026c:	43da      	mvns	r2, r3
 800026e:	68bb      	ldr	r3, [r7, #8]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	401a      	ands	r2, r3
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	601a      	str	r2, [r3, #0]
	// if pin is output ?
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	789b      	ldrb	r3, [r3, #2]
 800027c:	2b04      	cmp	r3, #4
 800027e:	d00b      	beq.n	8000298 <MCAL_GPIO_INIT+0x62>
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	789b      	ldrb	r3, [r3, #2]
 8000284:	2b05      	cmp	r3, #5
 8000286:	d007      	beq.n	8000298 <MCAL_GPIO_INIT+0x62>
			||(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_OUTPUT_PP) ||(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_OUTPUT_OD))
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	2b06      	cmp	r3, #6
 800028e:	d003      	beq.n	8000298 <MCAL_GPIO_INIT+0x62>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	789b      	ldrb	r3, [r3, #2]
 8000294:	2b07      	cmp	r3, #7
 8000296:	d10e      	bne.n	80002b6 <MCAL_GPIO_INIT+0x80>
	{
		// set CNFx[1:0] MODE[1:0]
		Pin_Config = ( (((PinConfig->GPIO_MODE -4 )<<2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 8000298:	683b      	ldr	r3, [r7, #0]
 800029a:	789b      	ldrb	r3, [r3, #2]
 800029c:	3b04      	subs	r3, #4
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	b25a      	sxtb	r2, r3
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	78db      	ldrb	r3, [r3, #3]
 80002a6:	b25b      	sxtb	r3, r3
 80002a8:	4313      	orrs	r3, r2
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 030f 	and.w	r3, r3, #15
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e02c      	b.n	8000310 <MCAL_GPIO_INIT+0xda>
	}
	else // if pin is input
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) ||(PinConfig->GPIO_MODE == GPIO_MODE_FLOATINg_INPUT))
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	789b      	ldrb	r3, [r3, #2]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d003      	beq.n	80002c6 <MCAL_GPIO_INIT+0x90>
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	789b      	ldrb	r3, [r3, #2]
 80002c2:	2b01      	cmp	r3, #1
 80002c4:	d107      	bne.n	80002d6 <MCAL_GPIO_INIT+0xa0>
		{
			Pin_Config = ( (((PinConfig->GPIO_MODE )<<2) | 0x0) & 0x0F);
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	789b      	ldrb	r3, [r3, #2]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	73fb      	strb	r3, [r7, #15]
 80002d4:	e01c      	b.n	8000310 <MCAL_GPIO_INIT+0xda>
		}
		else if	(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_INPUT ) // consider it as input floating
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	789b      	ldrb	r3, [r3, #2]
 80002da:	2b08      	cmp	r3, #8
 80002dc:	d102      	bne.n	80002e4 <MCAL_GPIO_INIT+0xae>
		{
			Pin_Config = ( (((GPIO_MODE_FLOATINg_INPUT)<<2) | 0x0) & 0x0F);
 80002de:	2304      	movs	r3, #4
 80002e0:	73fb      	strb	r3, [r7, #15]
 80002e2:	e015      	b.n	8000310 <MCAL_GPIO_INIT+0xda>

		}
		else // pull up / pull down input
		{
			Pin_Config = ( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0x0F);
 80002e4:	2308      	movs	r3, #8
 80002e6:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	789b      	ldrb	r3, [r3, #2]
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d107      	bne.n	8000300 <MCAL_GPIO_INIT+0xca>
			{
				//	Table 20. Port bit configuration table Px ODR register = 1 --> pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	431a      	orrs	r2, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60da      	str	r2, [r3, #12]
 80002fe:	e007      	b.n	8000310 <MCAL_GPIO_INIT+0xda>

			}
			else // GPIO_MODE_INPUT_PD
			{
				//	Table 20. Port bit configuration table Px ODR register = 0 --> pull down
				GPIOx->ODR &=~(PinConfig->GPIO_PinNumber);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	683a      	ldr	r2, [r7, #0]
 8000306:	8812      	ldrh	r2, [r2, #0]
 8000308:	43d2      	mvns	r2, r2
 800030a:	401a      	ands	r2, r3
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*ConfigRegister) |= Pin_Config <<Get_CRLH_position(PinConfig->GPIO_PinNumber);
 8000310:	7bfc      	ldrb	r4, [r7, #15]
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	881b      	ldrh	r3, [r3, #0]
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff2a 	bl	8000170 <Get_CRLH_position>
 800031c:	4603      	mov	r3, r0
 800031e:	fa04 f203 	lsl.w	r2, r4, r3
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	431a      	orrs	r2, r3
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	601a      	str	r2, [r3, #0]
}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MCAL_GPIO_READ_PIN>:
 * @param[in] - pin number set by @ref GPIO_PINS_define (topic 2)
 * @retval	  - the input pin value according to @ref GPIO_PIN_state (topic 5)
 * Note		  - none
================================================================**/
uint8_t MCAL_GPIO_READ_PIN(GPIO_TypeDef *GPIOx,uint16_t PinNumber)
{
 8000334:	b480      	push	{r7}
 8000336:	b085      	sub	sp, #20
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus;
	if (((GPIOx->IDR) & PinNumber) != (uint32_t)GPIO_PIN_RESET)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	887b      	ldrh	r3, [r7, #2]
 8000346:	4013      	ands	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	d002      	beq.n	8000352 <MCAL_GPIO_READ_PIN+0x1e>
	{
		bitstatus = GPIO_PIN_SET;
 800034c:	2301      	movs	r3, #1
 800034e:	73fb      	strb	r3, [r7, #15]
 8000350:	e001      	b.n	8000356 <MCAL_GPIO_READ_PIN+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET;
 8000352:	2300      	movs	r3, #0
 8000354:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 8000356:	7bfb      	ldrb	r3, [r7, #15]
}
 8000358:	4618      	mov	r0, r3
 800035a:	3714      	adds	r7, #20
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr

08000362 <MCAL_GPIO_TOGGLE_PIN>:
 * @param[in] - pin number set by @ref GPIO_PINS_define (tpoic 2)
 * @retval	  - none
 * Note		  - none
================================================================**/
void MCAL_GPIO_TOGGLE_PIN(GPIO_TypeDef *GPIOx,uint16_t PinNumber)
{
 8000362:	b480      	push	{r7}
 8000364:	b083      	sub	sp, #12
 8000366:	af00      	add	r7, sp, #0
 8000368:	6078      	str	r0, [r7, #4]
 800036a:	460b      	mov	r3, r1
 800036c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= PinNumber;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	68da      	ldr	r2, [r3, #12]
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	405a      	eors	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	60da      	str	r2, [r3, #12]
}
 800037a:	bf00      	nop
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <clock_init>:
#include "STM32F103C6.h"
#include "STM32F103C6_Driver.h"


void clock_init()
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
	// Enable clock GPIOA
	RCC_GPIOA_CLC_EN();
 8000388:	4b07      	ldr	r3, [pc, #28]	; (80003a8 <clock_init+0x24>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a06      	ldr	r2, [pc, #24]	; (80003a8 <clock_init+0x24>)
 800038e:	f043 0304 	orr.w	r3, r3, #4
 8000392:	6193      	str	r3, [r2, #24]
	// Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <clock_init+0x24>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a03      	ldr	r2, [pc, #12]	; (80003a8 <clock_init+0x24>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000

080003ac <GPIOA_init>:

void GPIOA_init()
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t GPIOAConfig;
	GPIOAConfig.GPIO_PinNumber=GPIO_PINS_1;
 80003b2:	2302      	movs	r3, #2
 80003b4:	80bb      	strh	r3, [r7, #4]
	GPIOAConfig.GPIO_MODE=GPIO_MODE_FLOATINg_INPUT;
 80003b6:	2301      	movs	r3, #1
 80003b8:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &GPIOAConfig);
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	4619      	mov	r1, r3
 80003be:	4808      	ldr	r0, [pc, #32]	; (80003e0 <GPIOA_init+0x34>)
 80003c0:	f7ff ff39 	bl	8000236 <MCAL_GPIO_INIT>

	GPIOAConfig.GPIO_PinNumber=GPIO_PINS_13;
 80003c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c8:	80bb      	strh	r3, [r7, #4]
	GPIOAConfig.GPIO_MODE=GPIO_MODE_FLOATINg_INPUT;
 80003ca:	2301      	movs	r3, #1
 80003cc:	71bb      	strb	r3, [r7, #6]
	MCAL_GPIO_INIT(GPIOA, &GPIOAConfig);
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	4619      	mov	r1, r3
 80003d2:	4803      	ldr	r0, [pc, #12]	; (80003e0 <GPIOA_init+0x34>)
 80003d4:	f7ff ff2f 	bl	8000236 <MCAL_GPIO_INIT>

}
 80003d8:	bf00      	nop
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	40010800 	.word	0x40010800

080003e4 <GPIOB_init>:

void GPIOB_init()
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t GPIOBConfig;
	GPIOBConfig.GPIO_PinNumber=GPIO_PINS_1;
 80003ea:	2302      	movs	r3, #2
 80003ec:	80bb      	strh	r3, [r7, #4]
	GPIOBConfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80003ee:	2304      	movs	r3, #4
 80003f0:	71bb      	strb	r3, [r7, #6]
	GPIOBConfig.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 80003f2:	2301      	movs	r3, #1
 80003f4:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB,&GPIOBConfig);
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4619      	mov	r1, r3
 80003fa:	4809      	ldr	r0, [pc, #36]	; (8000420 <GPIOB_init+0x3c>)
 80003fc:	f7ff ff1b 	bl	8000236 <MCAL_GPIO_INIT>

	GPIOBConfig.GPIO_PinNumber=GPIO_PINS_13;
 8000400:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000404:	80bb      	strh	r3, [r7, #4]
	GPIOBConfig.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000406:	2304      	movs	r3, #4
 8000408:	71bb      	strb	r3, [r7, #6]
	GPIOBConfig.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 800040a:	2301      	movs	r3, #1
 800040c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_INIT(GPIOB,&GPIOBConfig);
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	4803      	ldr	r0, [pc, #12]	; (8000420 <GPIOB_init+0x3c>)
 8000414:	f7ff ff0f 	bl	8000236 <MCAL_GPIO_INIT>
}
 8000418:	bf00      	nop
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40010c00 	.word	0x40010c00

08000424 <delay>:

void delay(uint32_t time)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 800042c:	2300      	movs	r3, #0
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	e00b      	b.n	800044a <delay+0x26>
	{
		for (j = 0; j < 255;j++) ;
 8000432:	2300      	movs	r3, #0
 8000434:	60bb      	str	r3, [r7, #8]
 8000436:	e002      	b.n	800043e <delay+0x1a>
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	3301      	adds	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	2bfe      	cmp	r3, #254	; 0xfe
 8000442:	d9f9      	bls.n	8000438 <delay+0x14>
	for(i=0;i<time;i++)
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	3301      	adds	r3, #1
 8000448:	60fb      	str	r3, [r7, #12]
 800044a:	68fa      	ldr	r2, [r7, #12]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	429a      	cmp	r2, r3
 8000450:	d3ef      	bcc.n	8000432 <delay+0xe>
	}
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <main>:

int main(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
	// clock Enable PORTA and PORTB
	clock_init();
 8000460:	f7ff ff90 	bl	8000384 <clock_init>
	// Set GPIOA as an input
	GPIOA_init();
 8000464:	f7ff ffa2 	bl	80003ac <GPIOA_init>
	// Set GPIOB as an output
	GPIOB_init();
 8000468:	f7ff ffbc 	bl	80003e4 <GPIOB_init>

	while(1)
	{
		if (MCAL_GPIO_READ_PIN(GPIOA,GPIO_PINS_1)==0)
 800046c:	2102      	movs	r1, #2
 800046e:	4811      	ldr	r0, [pc, #68]	; (80004b4 <main+0x58>)
 8000470:	f7ff ff60 	bl	8000334 <MCAL_GPIO_READ_PIN>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d10b      	bne.n	8000492 <main+0x36>
		{
			// Toggle LED

			MCAL_GPIO_TOGGLE_PIN(GPIOB, GPIO_PINS_1);
 800047a:	2102      	movs	r1, #2
 800047c:	480e      	ldr	r0, [pc, #56]	; (80004b8 <main+0x5c>)
 800047e:	f7ff ff70 	bl	8000362 <MCAL_GPIO_TOGGLE_PIN>
			while (MCAL_GPIO_READ_PIN(GPIOA,GPIO_PINS_1)==0); //single press
 8000482:	bf00      	nop
 8000484:	2102      	movs	r1, #2
 8000486:	480b      	ldr	r0, [pc, #44]	; (80004b4 <main+0x58>)
 8000488:	f7ff ff54 	bl	8000334 <MCAL_GPIO_READ_PIN>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d0f8      	beq.n	8000484 <main+0x28>
		}
		if (MCAL_GPIO_READ_PIN(GPIOA,GPIO_PINS_13)==1)
 8000492:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <main+0x58>)
 8000498:	f7ff ff4c 	bl	8000334 <MCAL_GPIO_READ_PIN>
 800049c:	4603      	mov	r3, r0
 800049e:	2b01      	cmp	r3, #1
 80004a0:	d104      	bne.n	80004ac <main+0x50>
		{
			// Toggle LED
			MCAL_GPIO_TOGGLE_PIN(GPIOB, GPIO_PINS_13);
 80004a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a6:	4804      	ldr	r0, [pc, #16]	; (80004b8 <main+0x5c>)
 80004a8:	f7ff ff5b 	bl	8000362 <MCAL_GPIO_TOGGLE_PIN>
			// multi press
		}
		delay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f7ff ffb9 	bl	8000424 <delay>
		if (MCAL_GPIO_READ_PIN(GPIOA,GPIO_PINS_1)==0)
 80004b2:	e7db      	b.n	800046c <main+0x10>
 80004b4:	40010800 	.word	0x40010800
 80004b8:	40010c00 	.word	0x40010c00

080004bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004bc:	480d      	ldr	r0, [pc, #52]	; (80004f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80004c6:	490d      	ldr	r1, [pc, #52]	; (80004fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c8:	4a0d      	ldr	r2, [pc, #52]	; (8000500 <LoopForever+0xe>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004cc:	e002      	b.n	80004d4 <LoopCopyDataInit>

080004ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004d2:	3304      	adds	r3, #4

080004d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d8:	d3f9      	bcc.n	80004ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004da:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004dc:	4c0a      	ldr	r4, [pc, #40]	; (8000508 <LoopForever+0x16>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004e0:	e001      	b.n	80004e6 <LoopFillZerobss>

080004e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e4:	3204      	adds	r2, #4

080004e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e8:	d3fb      	bcc.n	80004e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004ea:	f000 f811 	bl	8000510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ee:	f7ff ffb5 	bl	800045c <main>

080004f2 <LoopForever>:

LoopForever:
    b LoopForever
 80004f2:	e7fe      	b.n	80004f2 <LoopForever>
  ldr   r0, =_estack
 80004f4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000500:	08000578 	.word	0x08000578
  ldr r2, =_sbss
 8000504:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000508:	2000001c 	.word	0x2000001c

0800050c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC1_2_IRQHandler>
	...

08000510 <__libc_init_array>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2500      	movs	r5, #0
 8000514:	4e0c      	ldr	r6, [pc, #48]	; (8000548 <__libc_init_array+0x38>)
 8000516:	4c0d      	ldr	r4, [pc, #52]	; (800054c <__libc_init_array+0x3c>)
 8000518:	1ba4      	subs	r4, r4, r6
 800051a:	10a4      	asrs	r4, r4, #2
 800051c:	42a5      	cmp	r5, r4
 800051e:	d109      	bne.n	8000534 <__libc_init_array+0x24>
 8000520:	f000 f81a 	bl	8000558 <_init>
 8000524:	2500      	movs	r5, #0
 8000526:	4e0a      	ldr	r6, [pc, #40]	; (8000550 <__libc_init_array+0x40>)
 8000528:	4c0a      	ldr	r4, [pc, #40]	; (8000554 <__libc_init_array+0x44>)
 800052a:	1ba4      	subs	r4, r4, r6
 800052c:	10a4      	asrs	r4, r4, #2
 800052e:	42a5      	cmp	r5, r4
 8000530:	d105      	bne.n	800053e <__libc_init_array+0x2e>
 8000532:	bd70      	pop	{r4, r5, r6, pc}
 8000534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000538:	4798      	blx	r3
 800053a:	3501      	adds	r5, #1
 800053c:	e7ee      	b.n	800051c <__libc_init_array+0xc>
 800053e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000542:	4798      	blx	r3
 8000544:	3501      	adds	r5, #1
 8000546:	e7f2      	b.n	800052e <__libc_init_array+0x1e>
 8000548:	08000570 	.word	0x08000570
 800054c:	08000570 	.word	0x08000570
 8000550:	08000570 	.word	0x08000570
 8000554:	08000574 	.word	0x08000574

08000558 <_init>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	bf00      	nop
 800055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800055e:	bc08      	pop	{r3}
 8000560:	469e      	mov	lr, r3
 8000562:	4770      	bx	lr

08000564 <_fini>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	bf00      	nop
 8000568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800056a:	bc08      	pop	{r3}
 800056c:	469e      	mov	lr, r3
 800056e:	4770      	bx	lr
