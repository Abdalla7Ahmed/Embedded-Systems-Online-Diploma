
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c58  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000d88  08000d88  00010d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000db0  08000db0  00010db8  2**0
                  CONTENTS
  4 .ARM          00000000  08000db0  08000db0  00010db8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000db0  08000db8  00010db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000db0  08000db0  00010db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000db4  08000db4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010db8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000db8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000db8  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010db8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000331e  00000000  00000000  00010de1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007ed  00000000  00000000  000140ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000944  00000000  00000000  000148ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000198  00000000  00000000  00015230  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000150  00000000  00000000  000153c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000ca0  00000000  00000000  00015518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001e6a  00000000  00000000  000161b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a63b  00000000  00000000  00018022  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002265d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004f8  00000000  00000000  000226d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d70 	.word	0x08000d70

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d70 	.word	0x08000d70

08000170 <LCD_INIT>:
#include "lcd.h"

GPIO_PinConfig_t PinConfigLCD;

void LCD_INIT()
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Wait_m(20);
 8000174:	2014      	movs	r0, #20
 8000176:	f000 f96c 	bl	8000452 <Wait_m>
	// 	set EN_SWITCH , RW_SWITCH and RS_SWITCH as an output push pull
	PinConfigLCD.GPIO_PinNumber =RS_SWITCH;
 800017a:	4b5b      	ldr	r3, [pc, #364]	; (80002e8 <LCD_INIT+0x178>)
 800017c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000180:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000182:	4b59      	ldr	r3, [pc, #356]	; (80002e8 <LCD_INIT+0x178>)
 8000184:	2204      	movs	r2, #4
 8000186:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 8000188:	4b57      	ldr	r3, [pc, #348]	; (80002e8 <LCD_INIT+0x178>)
 800018a:	2201      	movs	r2, #1
 800018c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,&PinConfigLCD);
 800018e:	4956      	ldr	r1, [pc, #344]	; (80002e8 <LCD_INIT+0x178>)
 8000190:	4856      	ldr	r0, [pc, #344]	; (80002ec <LCD_INIT+0x17c>)
 8000192:	f000 fca0 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber =RW_SWITCH;
 8000196:	4b54      	ldr	r3, [pc, #336]	; (80002e8 <LCD_INIT+0x178>)
 8000198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800019c:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800019e:	4b52      	ldr	r3, [pc, #328]	; (80002e8 <LCD_INIT+0x178>)
 80001a0:	2204      	movs	r2, #4
 80001a2:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 80001a4:	4b50      	ldr	r3, [pc, #320]	; (80002e8 <LCD_INIT+0x178>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,&PinConfigLCD);
 80001aa:	494f      	ldr	r1, [pc, #316]	; (80002e8 <LCD_INIT+0x178>)
 80001ac:	484f      	ldr	r0, [pc, #316]	; (80002ec <LCD_INIT+0x17c>)
 80001ae:	f000 fc92 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber =EN_SWITCH;
 80001b2:	4b4d      	ldr	r3, [pc, #308]	; (80002e8 <LCD_INIT+0x178>)
 80001b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001b8:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001ba:	4b4b      	ldr	r3, [pc, #300]	; (80002e8 <LCD_INIT+0x178>)
 80001bc:	2204      	movs	r2, #4
 80001be:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 80001c0:	4b49      	ldr	r3, [pc, #292]	; (80002e8 <LCD_INIT+0x178>)
 80001c2:	2201      	movs	r2, #1
 80001c4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_CTRL,&PinConfigLCD);
 80001c6:	4948      	ldr	r1, [pc, #288]	; (80002e8 <LCD_INIT+0x178>)
 80001c8:	4848      	ldr	r0, [pc, #288]	; (80002ec <LCD_INIT+0x17c>)
 80001ca:	f000 fc84 	bl	8000ad6 <MCAL_GPIO_INIT>

	// Set LCD_Port as an output push pull with speed 10 MHZ
	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_0;
 80001ce:	4b46      	ldr	r3, [pc, #280]	; (80002e8 <LCD_INIT+0x178>)
 80001d0:	2201      	movs	r2, #1
 80001d2:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001d4:	4b44      	ldr	r3, [pc, #272]	; (80002e8 <LCD_INIT+0x178>)
 80001d6:	2204      	movs	r2, #4
 80001d8:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 80001da:	4b43      	ldr	r3, [pc, #268]	; (80002e8 <LCD_INIT+0x178>)
 80001dc:	2201      	movs	r2, #1
 80001de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 80001e0:	4941      	ldr	r1, [pc, #260]	; (80002e8 <LCD_INIT+0x178>)
 80001e2:	4842      	ldr	r0, [pc, #264]	; (80002ec <LCD_INIT+0x17c>)
 80001e4:	f000 fc77 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_1;
 80001e8:	4b3f      	ldr	r3, [pc, #252]	; (80002e8 <LCD_INIT+0x178>)
 80001ea:	2202      	movs	r2, #2
 80001ec:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80001ee:	4b3e      	ldr	r3, [pc, #248]	; (80002e8 <LCD_INIT+0x178>)
 80001f0:	2204      	movs	r2, #4
 80001f2:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 80001f4:	4b3c      	ldr	r3, [pc, #240]	; (80002e8 <LCD_INIT+0x178>)
 80001f6:	2201      	movs	r2, #1
 80001f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 80001fa:	493b      	ldr	r1, [pc, #236]	; (80002e8 <LCD_INIT+0x178>)
 80001fc:	483b      	ldr	r0, [pc, #236]	; (80002ec <LCD_INIT+0x17c>)
 80001fe:	f000 fc6a 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_2;
 8000202:	4b39      	ldr	r3, [pc, #228]	; (80002e8 <LCD_INIT+0x178>)
 8000204:	2204      	movs	r2, #4
 8000206:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000208:	4b37      	ldr	r3, [pc, #220]	; (80002e8 <LCD_INIT+0x178>)
 800020a:	2204      	movs	r2, #4
 800020c:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 800020e:	4b36      	ldr	r3, [pc, #216]	; (80002e8 <LCD_INIT+0x178>)
 8000210:	2201      	movs	r2, #1
 8000212:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 8000214:	4934      	ldr	r1, [pc, #208]	; (80002e8 <LCD_INIT+0x178>)
 8000216:	4835      	ldr	r0, [pc, #212]	; (80002ec <LCD_INIT+0x17c>)
 8000218:	f000 fc5d 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_3;
 800021c:	4b32      	ldr	r3, [pc, #200]	; (80002e8 <LCD_INIT+0x178>)
 800021e:	2208      	movs	r2, #8
 8000220:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000222:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <LCD_INIT+0x178>)
 8000224:	2204      	movs	r2, #4
 8000226:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 8000228:	4b2f      	ldr	r3, [pc, #188]	; (80002e8 <LCD_INIT+0x178>)
 800022a:	2201      	movs	r2, #1
 800022c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 800022e:	492e      	ldr	r1, [pc, #184]	; (80002e8 <LCD_INIT+0x178>)
 8000230:	482e      	ldr	r0, [pc, #184]	; (80002ec <LCD_INIT+0x17c>)
 8000232:	f000 fc50 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_4;
 8000236:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <LCD_INIT+0x178>)
 8000238:	2210      	movs	r2, #16
 800023a:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800023c:	4b2a      	ldr	r3, [pc, #168]	; (80002e8 <LCD_INIT+0x178>)
 800023e:	2204      	movs	r2, #4
 8000240:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 8000242:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <LCD_INIT+0x178>)
 8000244:	2201      	movs	r2, #1
 8000246:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 8000248:	4927      	ldr	r1, [pc, #156]	; (80002e8 <LCD_INIT+0x178>)
 800024a:	4828      	ldr	r0, [pc, #160]	; (80002ec <LCD_INIT+0x17c>)
 800024c:	f000 fc43 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_5;
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <LCD_INIT+0x178>)
 8000252:	2220      	movs	r2, #32
 8000254:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000256:	4b24      	ldr	r3, [pc, #144]	; (80002e8 <LCD_INIT+0x178>)
 8000258:	2204      	movs	r2, #4
 800025a:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 800025c:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <LCD_INIT+0x178>)
 800025e:	2201      	movs	r2, #1
 8000260:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 8000262:	4921      	ldr	r1, [pc, #132]	; (80002e8 <LCD_INIT+0x178>)
 8000264:	4821      	ldr	r0, [pc, #132]	; (80002ec <LCD_INIT+0x17c>)
 8000266:	f000 fc36 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_6;
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <LCD_INIT+0x178>)
 800026c:	2240      	movs	r2, #64	; 0x40
 800026e:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <LCD_INIT+0x178>)
 8000272:	2204      	movs	r2, #4
 8000274:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 8000276:	4b1c      	ldr	r3, [pc, #112]	; (80002e8 <LCD_INIT+0x178>)
 8000278:	2201      	movs	r2, #1
 800027a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 800027c:	491a      	ldr	r1, [pc, #104]	; (80002e8 <LCD_INIT+0x178>)
 800027e:	481b      	ldr	r0, [pc, #108]	; (80002ec <LCD_INIT+0x17c>)
 8000280:	f000 fc29 	bl	8000ad6 <MCAL_GPIO_INIT>

	PinConfigLCD.GPIO_PinNumber=GPIO_PIN_7;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <LCD_INIT+0x178>)
 8000286:	2280      	movs	r2, #128	; 0x80
 8000288:	801a      	strh	r2, [r3, #0]
	PinConfigLCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <LCD_INIT+0x178>)
 800028c:	2204      	movs	r2, #4
 800028e:	709a      	strb	r2, [r3, #2]
	PinConfigLCD.GPIO_OUTPUT_SPEED=GPIO_OUTPUT_SPEED_10M;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <LCD_INIT+0x178>)
 8000292:	2201      	movs	r2, #1
 8000294:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_INIT(LCD_PORT, &PinConfigLCD);
 8000296:	4914      	ldr	r1, [pc, #80]	; (80002e8 <LCD_INIT+0x178>)
 8000298:	4814      	ldr	r0, [pc, #80]	; (80002ec <LCD_INIT+0x17c>)
 800029a:	f000 fc1c 	bl	8000ad6 <MCAL_GPIO_INIT>

	MCAL_GPIO_WRITE_PIN(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002a4:	4811      	ldr	r0, [pc, #68]	; (80002ec <LCD_INIT+0x17c>)
 80002a6:	f000 fc95 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80002aa:	2200      	movs	r2, #0
 80002ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002b0:	480e      	ldr	r0, [pc, #56]	; (80002ec <LCD_INIT+0x17c>)
 80002b2:	f000 fc8f 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <LCD_INIT+0x17c>)
 80002be:	f000 fc89 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	Wait_m(15);
 80002c2:	200f      	movs	r0, #15
 80002c4:	f000 f8c5 	bl	8000452 <Wait_m>

	LCD_clear_screen();
 80002c8:	f000 f898 	bl	80003fc <LCD_clear_screen>
//#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80002cc:	2038      	movs	r0, #56	; 0x38
 80002ce:	f000 f80f 	bl	80002f0 <LCD_WRITE_COMMAND>
//#ifdef FOUR_BIT_MODE
//	LCD_WRITE_COMMAND(0x02);
//	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
//#endif

	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80002d2:	2006      	movs	r0, #6
 80002d4:	f000 f80c 	bl	80002f0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80002d8:	2080      	movs	r0, #128	; 0x80
 80002da:	f000 f809 	bl	80002f0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80002de:	200f      	movs	r0, #15
 80002e0:	f000 f806 	bl	80002f0 <LCD_WRITE_COMMAND>

}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000020 	.word	0x20000020
 80002ec:	40010800 	.word	0x40010800

080002f0 <LCD_WRITE_COMMAND>:
void LCD_WRITE_COMMAND(unsigned char command)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
//LCD_check_lcd_isbusy();
//#ifdef EIGHT_BIT_MODE
	//LCD_PORT = command;
	MCAL_GPIO_WRITE_PORT(LCD_PORT,(uint16_t)command);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	b29b      	uxth	r3, r3
 80002fe:	4619      	mov	r1, r3
 8000300:	480b      	ldr	r0, [pc, #44]	; (8000330 <LCD_WRITE_COMMAND+0x40>)
 8000302:	f000 fc7e 	bl	8000c02 <MCAL_GPIO_WRITE_PORT>
	//CLEARBIT(LCD_CTRL,RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030c:	4808      	ldr	r0, [pc, #32]	; (8000330 <LCD_WRITE_COMMAND+0x40>)
 800030e:	f000 fc61 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	//CLEARBIT(LCD_CTRL,RS_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000318:	4805      	ldr	r0, [pc, #20]	; (8000330 <LCD_WRITE_COMMAND+0x40>)
 800031a:	f000 fc5b 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	Wait_m(1);
 800031e:	2001      	movs	r0, #1
 8000320:	f000 f897 	bl	8000452 <Wait_m>
	LCD_lcd_kick();
 8000324:	f000 f854 	bl	80003d0 <LCD_lcd_kick>
//	CLEARBIT(LCD_CTRL,RW_SWITCH);
//	CLEARBIT(LCD_CTRL,RS_SWITCH);
//	LCD_lcd_kick();
//#endif

}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	40010800 	.word	0x40010800

08000334 <LCD_WRITE_CHAR>:
void LCD_WRITE_CHAR(unsigned char character)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	4603      	mov	r3, r0
 800033c:	71fb      	strb	r3, [r7, #7]
//#ifdef EIGHT_BIT_MODE
	//LCD_check_lcd_isbusy();
	//LCD_PORT = character;
	MCAL_GPIO_WRITE_PORT(LCD_CTRL,(uint16_t)character);
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	b29b      	uxth	r3, r3
 8000342:	4619      	mov	r1, r3
 8000344:	480b      	ldr	r0, [pc, #44]	; (8000374 <LCD_WRITE_CHAR+0x40>)
 8000346:	f000 fc5c 	bl	8000c02 <MCAL_GPIO_WRITE_PORT>
	//CLEARBIT(LCD_CTRL,RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000350:	4808      	ldr	r0, [pc, #32]	; (8000374 <LCD_WRITE_CHAR+0x40>)
 8000352:	f000 fc3f 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	//SETBIT(LCD_CTRL,RS_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000356:	2201      	movs	r2, #1
 8000358:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800035c:	4805      	ldr	r0, [pc, #20]	; (8000374 <LCD_WRITE_CHAR+0x40>)
 800035e:	f000 fc39 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	Wait_m(1);
 8000362:	2001      	movs	r0, #1
 8000364:	f000 f875 	bl	8000452 <Wait_m>
	LCD_lcd_kick();
 8000368:	f000 f832 	bl	80003d0 <LCD_lcd_kick>
//	SETBIT(LCD_CTRL,RS_SWITCH);
//	CLEARBIT(LCD_CTRL,RW_SWITCH);
//	LCD_lcd_kick();
//#endif

}
 800036c:	bf00      	nop
 800036e:	3708      	adds	r7, #8
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}
 8000374:	40010800 	.word	0x40010800

08000378 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	uint32_t counter=0;
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
	while (*string >0)
 8000384:	e01c      	b.n	80003c0 <LCD_WRITE_STRING+0x48>
	{
		LCD_WRITE_CHAR(*string++);
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	1c5a      	adds	r2, r3, #1
 800038a:	607a      	str	r2, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ffd0 	bl	8000334 <LCD_WRITE_CHAR>
		counter++;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	3301      	adds	r3, #1
 8000398:	60fb      	str	r3, [r7, #12]
		if (counter==16)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	2b10      	cmp	r3, #16
 800039e:	d104      	bne.n	80003aa <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(1,0);
 80003a0:	2100      	movs	r1, #0
 80003a2:	2001      	movs	r0, #1
 80003a4:	f000 f831 	bl	800040a <LCD_GOTO_XY>
 80003a8:	e00a      	b.n	80003c0 <LCD_WRITE_STRING+0x48>
		}
		else if (counter==32)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	2b20      	cmp	r3, #32
 80003ae:	d107      	bne.n	80003c0 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80003b0:	f000 f824 	bl	80003fc <LCD_clear_screen>
			LCD_GOTO_XY(0,0);
 80003b4:	2100      	movs	r1, #0
 80003b6:	2000      	movs	r0, #0
 80003b8:	f000 f827 	bl	800040a <LCD_GOTO_XY>
			counter=0;
 80003bc:	2300      	movs	r3, #0
 80003be:	60fb      	str	r3, [r7, #12]
	while (*string >0)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1de      	bne.n	8000386 <LCD_WRITE_STRING+0xe>
		}
	}

}
 80003c8:	bf00      	nop
 80003ca:	3710      	adds	r7, #16
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bd80      	pop	{r7, pc}

080003d0 <LCD_lcd_kick>:
	//CLEARBIT(LCD_CTRL,RW_SWITCH);
	MCAL_GPIO_WRITE_PIN(LCD_CTRL,RW_SWITCH,GPIO_PIN_RESET);

}
void LCD_lcd_kick(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	MCAL_GPIO_WRITE_PIN(LCD_CTRL,EN_SWITCH,GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003da:	4807      	ldr	r0, [pc, #28]	; (80003f8 <LCD_lcd_kick+0x28>)
 80003dc:	f000 fbfa 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
	Wait_m(50);
 80003e0:	2032      	movs	r0, #50	; 0x32
 80003e2:	f000 f836 	bl	8000452 <Wait_m>
	MCAL_GPIO_WRITE_PIN(LCD_CTRL,EN_SWITCH,GPIO_PIN_RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ec:	4802      	ldr	r0, [pc, #8]	; (80003f8 <LCD_lcd_kick+0x28>)
 80003ee:	f000 fbf1 	bl	8000bd4 <MCAL_GPIO_WRITE_PIN>
}
 80003f2:	bf00      	nop
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	40010800 	.word	0x40010800

080003fc <LCD_clear_screen>:
void LCD_clear_screen()
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000400:	2001      	movs	r0, #1
 8000402:	f7ff ff75 	bl	80002f0 <LCD_WRITE_COMMAND>
}
 8000406:	bf00      	nop
 8000408:	bd80      	pop	{r7, pc}

0800040a <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char line, unsigned char position){
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	4603      	mov	r3, r0
 8000412:	460a      	mov	r2, r1
 8000414:	71fb      	strb	r3, [r7, #7]
 8000416:	4613      	mov	r3, r2
 8000418:	71bb      	strb	r3, [r7, #6]
	if (line == 0)
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	2b00      	cmp	r3, #0
 800041e:	d108      	bne.n	8000432 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	2b0f      	cmp	r3, #15
 8000424:	d805      	bhi.n	8000432 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000426:	79bb      	ldrb	r3, [r7, #6]
 8000428:	3b80      	subs	r3, #128	; 0x80
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff5f 	bl	80002f0 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 1)
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d108      	bne.n	800044a <LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000438:	79bb      	ldrb	r3, [r7, #6]
 800043a:	2b0f      	cmp	r3, #15
 800043c:	d805      	bhi.n	800044a <LCD_GOTO_XY+0x40>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 800043e:	79bb      	ldrb	r3, [r7, #6]
 8000440:	3b40      	subs	r3, #64	; 0x40
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff53 	bl	80002f0 <LCD_WRITE_COMMAND>
		}
	}
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <Wait_m>:
//	LCD_WRITE_STRING(str);
//}


void Wait_m(uint32_t time)
{
 8000452:	b480      	push	{r7}
 8000454:	b085      	sub	sp, #20
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	e00b      	b.n	8000478 <Wait_m+0x26>
	{
		for (j = 0; j < 255;j++) ;
 8000460:	2300      	movs	r3, #0
 8000462:	60bb      	str	r3, [r7, #8]
 8000464:	e002      	b.n	800046c <Wait_m+0x1a>
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	3301      	adds	r3, #1
 800046a:	60bb      	str	r3, [r7, #8]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	2bfe      	cmp	r3, #254	; 0xfe
 8000470:	d9f9      	bls.n	8000466 <Wait_m+0x14>
	for(i=0;i<time;i++)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	429a      	cmp	r2, r3
 800047e:	d3ef      	bcc.n	8000460 <Wait_m+0xe>
	}
}
 8000480:	bf00      	nop
 8000482:	3714      	adds	r7, #20
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
	...

0800048c <Enable_NVIC>:



// ===================================Generic functions =========================
void Enable_NVIC(uint16_t IRQ)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000496:	88fb      	ldrh	r3, [r7, #6]
 8000498:	2b0f      	cmp	r3, #15
 800049a:	d854      	bhi.n	8000546 <Enable_NVIC+0xba>
 800049c:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <Enable_NVIC+0x18>)
 800049e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a2:	bf00      	nop
 80004a4:	080004e5 	.word	0x080004e5
 80004a8:	080004f3 	.word	0x080004f3
 80004ac:	08000501 	.word	0x08000501
 80004b0:	0800050f 	.word	0x0800050f
 80004b4:	0800051d 	.word	0x0800051d
 80004b8:	0800052b 	.word	0x0800052b
 80004bc:	0800052b 	.word	0x0800052b
 80004c0:	0800052b 	.word	0x0800052b
 80004c4:	0800052b 	.word	0x0800052b
 80004c8:	0800052b 	.word	0x0800052b
 80004cc:	08000539 	.word	0x08000539
 80004d0:	08000539 	.word	0x08000539
 80004d4:	08000539 	.word	0x08000539
 80004d8:	08000539 	.word	0x08000539
 80004dc:	08000539 	.word	0x08000539
 80004e0:	08000539 	.word	0x08000539
	{
	case 0:
		NVIC_IRQ6_EXTRI0_Enable();
 80004e4:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <Enable_NVIC+0xc4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a19      	ldr	r2, [pc, #100]	; (8000550 <Enable_NVIC+0xc4>)
 80004ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ee:	6013      	str	r3, [r2, #0]
		break;
 80004f0:	e029      	b.n	8000546 <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTRI1_Enable();
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <Enable_NVIC+0xc4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <Enable_NVIC+0xc4>)
 80004f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004fc:	6013      	str	r3, [r2, #0]
		break;
 80004fe:	e022      	b.n	8000546 <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTRI2_Enable();
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <Enable_NVIC+0xc4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a12      	ldr	r2, [pc, #72]	; (8000550 <Enable_NVIC+0xc4>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800050a:	6013      	str	r3, [r2, #0]
		break;
 800050c:	e01b      	b.n	8000546 <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTRI3_Enable();
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <Enable_NVIC+0xc4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a0f      	ldr	r2, [pc, #60]	; (8000550 <Enable_NVIC+0xc4>)
 8000514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000518:	6013      	str	r3, [r2, #0]
		break;
 800051a:	e014      	b.n	8000546 <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTRI4_Enable();
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <Enable_NVIC+0xc4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <Enable_NVIC+0xc4>)
 8000522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000526:	6013      	str	r3, [r2, #0]
		break;
 8000528:	e00d      	b.n	8000546 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTRI5_9_Enable();
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <Enable_NVIC+0xc4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a08      	ldr	r2, [pc, #32]	; (8000550 <Enable_NVIC+0xc4>)
 8000530:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000534:	6013      	str	r3, [r2, #0]
		break;
 8000536:	e006      	b.n	8000546 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTRI10_15_Enable() ;
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <Enable_NVIC+0xc4>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <Enable_NVIC+0xc4>)
 800053e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000542:	6053      	str	r3, [r2, #4]
		 break;
 8000544:	bf00      	nop
	}
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	e000e100 	.word	0xe000e100

08000554 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d854      	bhi.n	800060e <Disable_NVIC+0xba>
 8000564:	a201      	add	r2, pc, #4	; (adr r2, 800056c <Disable_NVIC+0x18>)
 8000566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800056a:	bf00      	nop
 800056c:	080005ad 	.word	0x080005ad
 8000570:	080005bb 	.word	0x080005bb
 8000574:	080005c9 	.word	0x080005c9
 8000578:	080005d7 	.word	0x080005d7
 800057c:	080005e5 	.word	0x080005e5
 8000580:	080005f3 	.word	0x080005f3
 8000584:	080005f3 	.word	0x080005f3
 8000588:	080005f3 	.word	0x080005f3
 800058c:	080005f3 	.word	0x080005f3
 8000590:	080005f3 	.word	0x080005f3
 8000594:	08000601 	.word	0x08000601
 8000598:	08000601 	.word	0x08000601
 800059c:	08000601 	.word	0x08000601
 80005a0:	08000601 	.word	0x08000601
 80005a4:	08000601 	.word	0x08000601
 80005a8:	08000601 	.word	0x08000601
	{
	case 0:
		NVIC_IRQ6_EXTRI0_Disable();
 80005ac:	4b1a      	ldr	r3, [pc, #104]	; (8000618 <Disable_NVIC+0xc4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a19      	ldr	r2, [pc, #100]	; (8000618 <Disable_NVIC+0xc4>)
 80005b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b6:	6013      	str	r3, [r2, #0]
		break;
 80005b8:	e029      	b.n	800060e <Disable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTRI1_Disable();
 80005ba:	4b17      	ldr	r3, [pc, #92]	; (8000618 <Disable_NVIC+0xc4>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a16      	ldr	r2, [pc, #88]	; (8000618 <Disable_NVIC+0xc4>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6013      	str	r3, [r2, #0]
		break;
 80005c6:	e022      	b.n	800060e <Disable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTRI2_Disable();
 80005c8:	4b13      	ldr	r3, [pc, #76]	; (8000618 <Disable_NVIC+0xc4>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <Disable_NVIC+0xc4>)
 80005ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d2:	6013      	str	r3, [r2, #0]
		break;
 80005d4:	e01b      	b.n	800060e <Disable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTRI3_Disable();
 80005d6:	4b10      	ldr	r3, [pc, #64]	; (8000618 <Disable_NVIC+0xc4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <Disable_NVIC+0xc4>)
 80005dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e0:	6013      	str	r3, [r2, #0]
		break;
 80005e2:	e014      	b.n	800060e <Disable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTRI4_Disable();
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <Disable_NVIC+0xc4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <Disable_NVIC+0xc4>)
 80005ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ee:	6013      	str	r3, [r2, #0]
		break;
 80005f0:	e00d      	b.n	800060e <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTRI5_9_Disable();
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <Disable_NVIC+0xc4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <Disable_NVIC+0xc4>)
 80005f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005fc:	6013      	str	r3, [r2, #0]
		break;
 80005fe:	e006      	b.n	800060e <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTRI10_15_Disable() ;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <Disable_NVIC+0xc4>)
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	4a04      	ldr	r2, [pc, #16]	; (8000618 <Disable_NVIC+0xc4>)
 8000606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060a:	6053      	str	r3, [r2, #4]
		 break;
 800060c:	bf00      	nop
	}
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	e000e700 	.word	0xe000e700

0800061c <Update_EXTRI>:
void Update_EXTRI(EXTRI_PinConfig_t *EXTRI_Config)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	// 1- Configure GPIO as an alternative input --> floating input
	GPIO_PinConfig_t PinConfig;
	PinConfig.GPIO_PinNumber=EXTRI_Config->PIN_INPUT.GPIO_PinNumber;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	891b      	ldrh	r3, [r3, #8]
 8000628:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE=GPIO_MODE_FLOATINg_INPUT;
 800062a:	2301      	movs	r3, #1
 800062c:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_INIT(EXTRI_Config->PIN_INPUT.GPIO_PORT, &PinConfig);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	f107 0208 	add.w	r2, r7, #8
 8000636:	4611      	mov	r1, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fa4c 	bl	8000ad6 <MCAL_GPIO_INIT>

	// 2- Update AFIO to rout between EXTRI line and  port
	// Index of EXTRI
	uint8_t AFIO_EXTICR_Index = (EXTRI_Config->PIN_INPUT.EXTRI_InputLine)/4;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	089b      	lsrs	r3, r3, #2
 8000644:	b29b      	uxth	r3, r3
 8000646:	73fb      	strb	r3, [r7, #15]
	// Position of the pins in EXTRICR register
	uint8_t AFIO_EXTRICR_Posision = ( (EXTRI_Config->PIN_INPUT.EXTRI_InputLine)%4)*4;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	f003 0303 	and.w	r3, r3, #3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	73bb      	strb	r3, [r7, #14]
	// Clear the register (four bit)
	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF<<AFIO_EXTRICR_Posision);
 8000658:	4a61      	ldr	r2, [pc, #388]	; (80007e0 <Update_EXTRI+0x1c4>)
 800065a:	7bfb      	ldrb	r3, [r7, #15]
 800065c:	3302      	adds	r3, #2
 800065e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	210f      	movs	r1, #15
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	495c      	ldr	r1, [pc, #368]	; (80007e0 <Update_EXTRI+0x1c4>)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	4002      	ands	r2, r0
 8000674:	3302      	adds	r3, #2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_Index] |=( (AFIO_GPIO_GPIO_Mapping(EXTRI_Config->PIN_INPUT.GPIO_PORT) &0xF) << AFIO_EXTRICR_Posision);
 800067a:	4a59      	ldr	r2, [pc, #356]	; (80007e0 <Update_EXTRI+0x1c4>)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3302      	adds	r3, #2
 8000680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4956      	ldr	r1, [pc, #344]	; (80007e4 <Update_EXTRI+0x1c8>)
 800068a:	428b      	cmp	r3, r1
 800068c:	d016      	beq.n	80006bc <Update_EXTRI+0xa0>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	4955      	ldr	r1, [pc, #340]	; (80007e8 <Update_EXTRI+0x1cc>)
 8000694:	428b      	cmp	r3, r1
 8000696:	d00f      	beq.n	80006b8 <Update_EXTRI+0x9c>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	4953      	ldr	r1, [pc, #332]	; (80007ec <Update_EXTRI+0x1d0>)
 800069e:	428b      	cmp	r3, r1
 80006a0:	d008      	beq.n	80006b4 <Update_EXTRI+0x98>
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	4952      	ldr	r1, [pc, #328]	; (80007f0 <Update_EXTRI+0x1d4>)
 80006a8:	428b      	cmp	r3, r1
 80006aa:	d101      	bne.n	80006b0 <Update_EXTRI+0x94>
 80006ac:	2303      	movs	r3, #3
 80006ae:	e006      	b.n	80006be <Update_EXTRI+0xa2>
 80006b0:	2300      	movs	r3, #0
 80006b2:	e004      	b.n	80006be <Update_EXTRI+0xa2>
 80006b4:	2302      	movs	r3, #2
 80006b6:	e002      	b.n	80006be <Update_EXTRI+0xa2>
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <Update_EXTRI+0xa2>
 80006bc:	2300      	movs	r3, #0
 80006be:	7bb9      	ldrb	r1, [r7, #14]
 80006c0:	408b      	lsls	r3, r1
 80006c2:	4618      	mov	r0, r3
 80006c4:	4946      	ldr	r1, [pc, #280]	; (80007e0 <Update_EXTRI+0x1c4>)
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	4302      	orrs	r2, r0
 80006ca:	3302      	adds	r3, #2
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// 3- Update rising and failing Edge
	EXTRI->RTSR &=~(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 80006d0:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <Update_EXTRI+0x1d8>)
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	8812      	ldrh	r2, [r2, #0]
 80006d8:	4611      	mov	r1, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	408a      	lsls	r2, r1
 80006de:	43d2      	mvns	r2, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a44      	ldr	r2, [pc, #272]	; (80007f4 <Update_EXTRI+0x1d8>)
 80006e4:	400b      	ands	r3, r1
 80006e6:	6093      	str	r3, [r2, #8]
	EXTRI->FTSR &=~(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 80006e8:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <Update_EXTRI+0x1d8>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	408a      	lsls	r2, r1
 80006f6:	43d2      	mvns	r2, r2
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a3e      	ldr	r2, [pc, #248]	; (80007f4 <Update_EXTRI+0x1d8>)
 80006fc:	400b      	ands	r3, r1
 80006fe:	60d3      	str	r3, [r2, #12]

	if (EXTRI_Config->EXTRI_Trigger_Case == EXTRI_Trigger_Rising)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7b1b      	ldrb	r3, [r3, #12]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d10b      	bne.n	8000720 <Update_EXTRI+0x104>
	{
		EXTRI->RTSR |=(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 8000708:	4b3a      	ldr	r3, [pc, #232]	; (80007f4 <Update_EXTRI+0x1d8>)
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	8812      	ldrh	r2, [r2, #0]
 8000710:	4611      	mov	r1, r2
 8000712:	2201      	movs	r2, #1
 8000714:	408a      	lsls	r2, r1
 8000716:	4611      	mov	r1, r2
 8000718:	4a36      	ldr	r2, [pc, #216]	; (80007f4 <Update_EXTRI+0x1d8>)
 800071a:	430b      	orrs	r3, r1
 800071c:	6093      	str	r3, [r2, #8]
 800071e:	e029      	b.n	8000774 <Update_EXTRI+0x158>
	}
	else if (EXTRI_Config->EXTRI_Trigger_Case == EXTRI_Trigger_Failing)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	7b1b      	ldrb	r3, [r3, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d10b      	bne.n	8000740 <Update_EXTRI+0x124>
	{
		EXTRI->FTSR |=(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <Update_EXTRI+0x1d8>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	8812      	ldrh	r2, [r2, #0]
 8000730:	4611      	mov	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	408a      	lsls	r2, r1
 8000736:	4611      	mov	r1, r2
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <Update_EXTRI+0x1d8>)
 800073a:	430b      	orrs	r3, r1
 800073c:	60d3      	str	r3, [r2, #12]
 800073e:	e019      	b.n	8000774 <Update_EXTRI+0x158>
	}
	else if (EXTRI_Config->EXTRI_Trigger_Case == EXTRI_Trigger_RisingANDFailing)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7b1b      	ldrb	r3, [r3, #12]
 8000744:	2b02      	cmp	r3, #2
 8000746:	d115      	bne.n	8000774 <Update_EXTRI+0x158>
	{
		EXTRI->RTSR |=(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 8000748:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <Update_EXTRI+0x1d8>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	8812      	ldrh	r2, [r2, #0]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <Update_EXTRI+0x1d8>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6093      	str	r3, [r2, #8]
		EXTRI->FTSR |=(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 800075e:	4b25      	ldr	r3, [pc, #148]	; (80007f4 <Update_EXTRI+0x1d8>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	8812      	ldrh	r2, [r2, #0]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	4611      	mov	r1, r2
 800076e:	4a21      	ldr	r2, [pc, #132]	; (80007f4 <Update_EXTRI+0x1d8>)
 8000770:	430b      	orrs	r3, r1
 8000772:	60d3      	str	r3, [r2, #12]
	}
	// 4- Update IRQ handing callback
	GP_IRQ_CallBack[EXTRI_Config->PIN_INPUT.EXTRI_InputLine]=EXTRI_Config->P_IRQ_CallBack;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	691b      	ldr	r3, [r3, #16]
 800077e:	4a1e      	ldr	r2, [pc, #120]	; (80007f8 <Update_EXTRI+0x1dc>)
 8000780:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	// 5- Enable / Disable IRQ and NVIC
	if(EXTRI_Config->IRQ_ENABLE==EXTRI_IRQ_Enable)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	7b5b      	ldrb	r3, [r3, #13]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d110      	bne.n	80007ae <Update_EXTRI+0x192>
	{
		EXTRI->IMR |= (1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 800078c:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <Update_EXTRI+0x1d8>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	687a      	ldr	r2, [r7, #4]
 8000792:	8812      	ldrh	r2, [r2, #0]
 8000794:	4611      	mov	r1, r2
 8000796:	2201      	movs	r2, #1
 8000798:	408a      	lsls	r2, r1
 800079a:	4611      	mov	r1, r2
 800079c:	4a15      	ldr	r2, [pc, #84]	; (80007f4 <Update_EXTRI+0x1d8>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff fe70 	bl	800048c <Enable_NVIC>
	else if(EXTRI_Config->IRQ_ENABLE==EXTRI_IRQ_Disable)
	{
		EXTRI->IMR &= ~(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
		Disable_NVIC(EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
	}
}
 80007ac:	e014      	b.n	80007d8 <Update_EXTRI+0x1bc>
	else if(EXTRI_Config->IRQ_ENABLE==EXTRI_IRQ_Disable)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	7b5b      	ldrb	r3, [r3, #13]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d110      	bne.n	80007d8 <Update_EXTRI+0x1bc>
		EXTRI->IMR &= ~(1<<EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <Update_EXTRI+0x1d8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	8812      	ldrh	r2, [r2, #0]
 80007be:	4611      	mov	r1, r2
 80007c0:	2201      	movs	r2, #1
 80007c2:	408a      	lsls	r2, r1
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <Update_EXTRI+0x1d8>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTRI_Config->PIN_INPUT.EXTRI_InputLine);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f7ff febe 	bl	8000554 <Disable_NVIC>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40010000 	.word	0x40010000
 80007e4:	40010800 	.word	0x40010800
 80007e8:	40010c00 	.word	0x40010c00
 80007ec:	40011000 	.word	0x40011000
 80007f0:	40011400 	.word	0x40011400
 80007f4:	40010400 	.word	0x40010400
 80007f8:	20000024 	.word	0x20000024

080007fc <MCAL_EXTRI_GPIO_INIT>:
 * @retval	  - none
 * Note		  - stm32f103c6 MCU has GPIOz [z one of A ,B , C ,D ,E]
 * 			   but LQFP48 Package has only GPIOA , GPIOB and Partial of GPIOC , GPIOD
================================================================**/
void MCAL_EXTRI_GPIO_INIT(EXTRI_PinConfig_t *EXTRI_Config)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	Update_EXTRI(EXTRI_Config);
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff09 	bl	800061c <Update_EXTRI>

}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <EXTI0_IRQHandler>:

// ================================================================
// IRQ Functions
//=================================================================
void EXTI0_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	//clear by writing 1 into the bit Pending register EXTRI_PR
	EXTRI->PR |= (1<<0);
 8000818:	4b05      	ldr	r3, [pc, #20]	; (8000830 <EXTI0_IRQHandler+0x1c>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	4a04      	ldr	r2, [pc, #16]	; (8000830 <EXTI0_IRQHandler+0x1c>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[0]();
 8000824:	4b03      	ldr	r3, [pc, #12]	; (8000834 <EXTI0_IRQHandler+0x20>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4798      	blx	r3
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40010400 	.word	0x40010400
 8000834:	20000024 	.word	0x20000024

08000838 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	EXTRI->PR |= (1<<1);
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <EXTI1_IRQHandler+0x1c>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <EXTI1_IRQHandler+0x1c>)
 8000842:	f043 0302 	orr.w	r3, r3, #2
 8000846:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[1]();
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <EXTI1_IRQHandler+0x20>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	4798      	blx	r3
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010400 	.word	0x40010400
 8000858:	20000024 	.word	0x20000024

0800085c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	EXTRI->PR |= (1<<2);
 8000860:	4b05      	ldr	r3, [pc, #20]	; (8000878 <EXTI2_IRQHandler+0x1c>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <EXTI2_IRQHandler+0x1c>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[2]();
 800086c:	4b03      	ldr	r3, [pc, #12]	; (800087c <EXTI2_IRQHandler+0x20>)
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	4798      	blx	r3
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40010400 	.word	0x40010400
 800087c:	20000024 	.word	0x20000024

08000880 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	//clear by writing 1 into the bit Pending register EXTRI_PR
	EXTRI->PR |= (1<<3);
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <EXTI3_IRQHandler+0x1c>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <EXTI3_IRQHandler+0x1c>)
 800088a:	f043 0308 	orr.w	r3, r3, #8
 800088e:	6153      	str	r3, [r2, #20]
	// call IRQ callBack
	GP_IRQ_CallBack[3]();
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <EXTI3_IRQHandler+0x20>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	4798      	blx	r3

}void EXT4_IRQHandler(void)
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40010400 	.word	0x40010400
 80008a0:	20000024 	.word	0x20000024

080008a4 <EXTI9_5_IRQHandler>:
	EXTRI->PR |= (1<<4);
	// call IRQ callBack
	GP_IRQ_CallBack[4]();
}
void EXTI9_5_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	// Check the EXTRI line number
	//clear by writing 1 into the bit Pending register EXTRI_PR
	// Call IRQ callBack
	if(EXTRI->PR & 1<<5) {EXTRI->PR |= (1<<5); 		GP_IRQ_CallBack[5]();}
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008aa:	695b      	ldr	r3, [r3, #20]
 80008ac:	f003 0320 	and.w	r3, r3, #32
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d008      	beq.n	80008c6 <EXTI9_5_IRQHandler+0x22>
 80008b4:	4b23      	ldr	r3, [pc, #140]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008b6:	695b      	ldr	r3, [r3, #20]
 80008b8:	4a22      	ldr	r2, [pc, #136]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6153      	str	r3, [r2, #20]
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <EXTI9_5_IRQHandler+0xa4>)
 80008c2:	695b      	ldr	r3, [r3, #20]
 80008c4:	4798      	blx	r3
	if(EXTRI->PR & 1<<6) {EXTRI->PR |= (1<<6); 		GP_IRQ_CallBack[6]();}
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008c8:	695b      	ldr	r3, [r3, #20]
 80008ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d008      	beq.n	80008e4 <EXTI9_5_IRQHandler+0x40>
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008dc:	6153      	str	r3, [r2, #20]
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <EXTI9_5_IRQHandler+0xa4>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4798      	blx	r3
	if(EXTRI->PR & 1<<7) {EXTRI->PR |= (1<<7); 		GP_IRQ_CallBack[7]();}
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d008      	beq.n	8000902 <EXTI9_5_IRQHandler+0x5e>
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a13      	ldr	r2, [pc, #76]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 80008f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fa:	6153      	str	r3, [r2, #20]
 80008fc:	4b12      	ldr	r3, [pc, #72]	; (8000948 <EXTI9_5_IRQHandler+0xa4>)
 80008fe:	69db      	ldr	r3, [r3, #28]
 8000900:	4798      	blx	r3
	if(EXTRI->PR & 1<<8) {EXTRI->PR |= (1<<8); 		GP_IRQ_CallBack[8]();}
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800090a:	2b00      	cmp	r3, #0
 800090c:	d008      	beq.n	8000920 <EXTI9_5_IRQHandler+0x7c>
 800090e:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 8000914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <EXTI9_5_IRQHandler+0xa4>)
 800091c:	6a1b      	ldr	r3, [r3, #32]
 800091e:	4798      	blx	r3
	if(EXTRI->PR & 1<<9) {EXTRI->PR |= (1<<9); 		GP_IRQ_CallBack[9]();}
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 8000922:	695b      	ldr	r3, [r3, #20]
 8000924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000928:	2b00      	cmp	r3, #0
 800092a:	d008      	beq.n	800093e <EXTI9_5_IRQHandler+0x9a>
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 800092e:	695b      	ldr	r3, [r3, #20]
 8000930:	4a04      	ldr	r2, [pc, #16]	; (8000944 <EXTI9_5_IRQHandler+0xa0>)
 8000932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000936:	6153      	str	r3, [r2, #20]
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <EXTI9_5_IRQHandler+0xa4>)
 800093a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093c:	4798      	blx	r3
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010400 	.word	0x40010400
 8000948:	20000024 	.word	0x20000024

0800094c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
	// Check the EXTRI line number
	//clear by writing 1 into the bit Pending register EXTRI_PR
	// Call IRQ callBack
	if(EXTRI->PR & 1<<10) {EXTRI->PR |= (1<<10);    GP_IRQ_CallBack[10]();}
 8000950:	4b2d      	ldr	r3, [pc, #180]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000958:	2b00      	cmp	r3, #0
 800095a:	d008      	beq.n	800096e <EXTI15_10_IRQHandler+0x22>
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 800095e:	695b      	ldr	r3, [r3, #20]
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 8000962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000966:	6153      	str	r3, [r2, #20]
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <EXTI15_10_IRQHandler+0xc0>)
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	4798      	blx	r3
	if(EXTRI->PR & 1<<11) {EXTRI->PR |= (1<<11);    GP_IRQ_CallBack[11]();}
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000976:	2b00      	cmp	r3, #0
 8000978:	d008      	beq.n	800098c <EXTI15_10_IRQHandler+0x40>
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	4a22      	ldr	r2, [pc, #136]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 8000980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000984:	6153      	str	r3, [r2, #20]
 8000986:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <EXTI15_10_IRQHandler+0xc0>)
 8000988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098a:	4798      	blx	r3
	if(EXTRI->PR & 1<<12) {EXTRI->PR |= (1<<12);    GP_IRQ_CallBack[12]();}
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000994:	2b00      	cmp	r3, #0
 8000996:	d008      	beq.n	80009aa <EXTI15_10_IRQHandler+0x5e>
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a1a      	ldr	r2, [pc, #104]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 800099e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <EXTI15_10_IRQHandler+0xc0>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4798      	blx	r3
	if(EXTRI->PR & 1<<13) {EXTRI->PR |= (1<<13); 	GP_IRQ_CallBack[13]();}
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d008      	beq.n	80009c8 <EXTI15_10_IRQHandler+0x7c>
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	4a13      	ldr	r2, [pc, #76]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c0:	6153      	str	r3, [r2, #20]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <EXTI15_10_IRQHandler+0xc0>)
 80009c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c6:	4798      	blx	r3
	if(EXTRI->PR & 1<<14) {EXTRI->PR |= (1<<14); 	GP_IRQ_CallBack[14]();}
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d008      	beq.n	80009e6 <EXTI15_10_IRQHandler+0x9a>
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009de:	6153      	str	r3, [r2, #20]
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <EXTI15_10_IRQHandler+0xc0>)
 80009e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e4:	4798      	blx	r3
	if(EXTRI->PR & 1<<15) {EXTRI->PR |= (1<<15); 	GP_IRQ_CallBack[15]();}
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009e8:	695b      	ldr	r3, [r3, #20]
 80009ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d008      	beq.n	8000a04 <EXTI15_10_IRQHandler+0xb8>
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <EXTI15_10_IRQHandler+0xbc>)
 80009f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009fc:	6153      	str	r3, [r2, #20]
 80009fe:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <EXTI15_10_IRQHandler+0xc0>)
 8000a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a02:	4798      	blx	r3
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40010400 	.word	0x40010400
 8000a0c:	20000024 	.word	0x20000024

08000a10 <Get_CRLH_position>:
 *      Author: Abotaleb
 */

#include "STM32F103C6_GPIO_Driver.h"
uint8_t Get_CRLH_position (uint16_t pinNumber)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2b80      	cmp	r3, #128	; 0x80
 8000a1e:	d042      	beq.n	8000aa6 <Get_CRLH_position+0x96>
 8000a20:	2b80      	cmp	r3, #128	; 0x80
 8000a22:	dc11      	bgt.n	8000a48 <Get_CRLH_position+0x38>
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d036      	beq.n	8000a96 <Get_CRLH_position+0x86>
 8000a28:	2b08      	cmp	r3, #8
 8000a2a:	dc06      	bgt.n	8000a3a <Get_CRLH_position+0x2a>
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d02e      	beq.n	8000a8e <Get_CRLH_position+0x7e>
 8000a30:	2b04      	cmp	r3, #4
 8000a32:	d02e      	beq.n	8000a92 <Get_CRLH_position+0x82>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d028      	beq.n	8000a8a <Get_CRLH_position+0x7a>
 8000a38:	e047      	b.n	8000aca <Get_CRLH_position+0xba>
 8000a3a:	2b20      	cmp	r3, #32
 8000a3c:	d02f      	beq.n	8000a9e <Get_CRLH_position+0x8e>
 8000a3e:	2b40      	cmp	r3, #64	; 0x40
 8000a40:	d02f      	beq.n	8000aa2 <Get_CRLH_position+0x92>
 8000a42:	2b10      	cmp	r3, #16
 8000a44:	d029      	beq.n	8000a9a <Get_CRLH_position+0x8a>
 8000a46:	e040      	b.n	8000aca <Get_CRLH_position+0xba>
 8000a48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a4c:	d033      	beq.n	8000ab6 <Get_CRLH_position+0xa6>
 8000a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a52:	dc09      	bgt.n	8000a68 <Get_CRLH_position+0x58>
 8000a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a58:	d029      	beq.n	8000aae <Get_CRLH_position+0x9e>
 8000a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a5e:	d028      	beq.n	8000ab2 <Get_CRLH_position+0xa2>
 8000a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a64:	d021      	beq.n	8000aaa <Get_CRLH_position+0x9a>
 8000a66:	e030      	b.n	8000aca <Get_CRLH_position+0xba>
 8000a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a6c:	d027      	beq.n	8000abe <Get_CRLH_position+0xae>
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a72:	dc03      	bgt.n	8000a7c <Get_CRLH_position+0x6c>
 8000a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a78:	d01f      	beq.n	8000aba <Get_CRLH_position+0xaa>
 8000a7a:	e026      	b.n	8000aca <Get_CRLH_position+0xba>
 8000a7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a80:	d01f      	beq.n	8000ac2 <Get_CRLH_position+0xb2>
 8000a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a86:	d01e      	beq.n	8000ac6 <Get_CRLH_position+0xb6>
 8000a88:	e01f      	b.n	8000aca <Get_CRLH_position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e01e      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	e01c      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000a92:	2308      	movs	r3, #8
 8000a94:	e01a      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000a96:	230c      	movs	r3, #12
 8000a98:	e018      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	e016      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000a9e:	2314      	movs	r3, #20
 8000aa0:	e014      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000aa2:	2318      	movs	r3, #24
 8000aa4:	e012      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000aa6:	231c      	movs	r3, #28
 8000aa8:	e010      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e00e      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	e00c      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000ab2:	2308      	movs	r3, #8
 8000ab4:	e00a      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000ab6:	230c      	movs	r3, #12
 8000ab8:	e008      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000aba:	2310      	movs	r3, #16
 8000abc:	e006      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000abe:	2314      	movs	r3, #20
 8000ac0:	e004      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000ac2:	2318      	movs	r3, #24
 8000ac4:	e002      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000ac6:	231c      	movs	r3, #28
 8000ac8:	e000      	b.n	8000acc <Get_CRLH_position+0xbc>
		break;
	}
	return 0;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <MCAL_GPIO_INIT>:
 * @retval	  - none
 * Note		  - stm32f103c6 MCU has GPIOz [z one of A ,B , C ,D ,E]
 * 			   but LQFP48 Package has only GPIOA , GPIOB and Partial of GPIOC , GPIOD
================================================================**/
void MCAL_GPIO_INIT(GPIO_TypeDef *GPIOx,GPIO_PinConfig_t *PinConfig)
{
 8000ad6:	b590      	push	{r4, r7, lr}
 8000ad8:	b085      	sub	sp, #20
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	6078      	str	r0, [r7, #4]
 8000ade:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) (x=A..G) pin 0 to 7
	//Port configuration register High (GPIOx_CRL) (x=A..G) pin 8 to 15
	volatile uint32_t *ConfigRegister = NULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
	uint8_t Pin_Config=0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	73fb      	strb	r3, [r7, #15]
	// check for set the pointer to CRL or CRH
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 ) ? &GPIOx->CRL : &GPIOx->CRH;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	881b      	ldrh	r3, [r3, #0]
 8000aec:	2bff      	cmp	r3, #255	; 0xff
 8000aee:	d801      	bhi.n	8000af4 <MCAL_GPIO_INIT+0x1e>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	e001      	b.n	8000af8 <MCAL_GPIO_INIT+0x22>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	3304      	adds	r3, #4
 8000af8:	60bb      	str	r3, [r7, #8]
	// clear CNF[1:0] MODE[1:0]
	(*ConfigRegister) &= ~(0xF<<Get_CRLH_position(PinConfig->GPIO_PinNumber));
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff86 	bl	8000a10 <Get_CRLH_position>
 8000b04:	4603      	mov	r3, r0
 8000b06:	461a      	mov	r2, r3
 8000b08:	230f      	movs	r3, #15
 8000b0a:	4093      	lsls	r3, r2
 8000b0c:	43da      	mvns	r2, r3
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	401a      	ands	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	601a      	str	r2, [r3, #0]
	// if pin is output ?
	if ((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	789b      	ldrb	r3, [r3, #2]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d00b      	beq.n	8000b38 <MCAL_GPIO_INIT+0x62>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	789b      	ldrb	r3, [r3, #2]
 8000b24:	2b05      	cmp	r3, #5
 8000b26:	d007      	beq.n	8000b38 <MCAL_GPIO_INIT+0x62>
			||(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_OUTPUT_PP) ||(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_OUTPUT_OD))
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d003      	beq.n	8000b38 <MCAL_GPIO_INIT+0x62>
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	789b      	ldrb	r3, [r3, #2]
 8000b34:	2b07      	cmp	r3, #7
 8000b36:	d10e      	bne.n	8000b56 <MCAL_GPIO_INIT+0x80>
	{
		// set CNFx[1:0] MODE[1:0]
		Pin_Config = ( (((PinConfig->GPIO_MODE -4 )<<2) | PinConfig->GPIO_OUTPUT_SPEED) & 0x0F);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	789b      	ldrb	r3, [r3, #2]
 8000b3c:	3b04      	subs	r3, #4
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	b25a      	sxtb	r2, r3
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	78db      	ldrb	r3, [r3, #3]
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	73fb      	strb	r3, [r7, #15]
 8000b54:	e02c      	b.n	8000bb0 <MCAL_GPIO_INIT+0xda>
	}
	else // if pin is input
	{
		if ((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG ) ||(PinConfig->GPIO_MODE == GPIO_MODE_FLOATINg_INPUT))
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	789b      	ldrb	r3, [r3, #2]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <MCAL_GPIO_INIT+0x90>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	789b      	ldrb	r3, [r3, #2]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d107      	bne.n	8000b76 <MCAL_GPIO_INIT+0xa0>
		{
			Pin_Config = ( (((PinConfig->GPIO_MODE )<<2) | 0x0) & 0x0F);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	789b      	ldrb	r3, [r3, #2]
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e01c      	b.n	8000bb0 <MCAL_GPIO_INIT+0xda>
		}
		else if	(PinConfig->GPIO_MODE == GPIO_MODE_ALTERNATIVE_INPUT ) // consider it as input floating
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	789b      	ldrb	r3, [r3, #2]
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d102      	bne.n	8000b84 <MCAL_GPIO_INIT+0xae>
		{
			Pin_Config = ( (((GPIO_MODE_FLOATINg_INPUT)<<2) | 0x0) & 0x0F);
 8000b7e:	2304      	movs	r3, #4
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e015      	b.n	8000bb0 <MCAL_GPIO_INIT+0xda>

		}
		else // pull up / pull down input
		{
			Pin_Config = ( (((GPIO_MODE_INPUT_PU)<<2) | 0x0) & 0x0F);
 8000b84:	2308      	movs	r3, #8
 8000b86:	73fb      	strb	r3, [r7, #15]
			if (PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	789b      	ldrb	r3, [r3, #2]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d107      	bne.n	8000ba0 <MCAL_GPIO_INIT+0xca>
			{
				//	Table 20. Port bit configuration table Px ODR register = 1 --> pull up
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	8812      	ldrh	r2, [r2, #0]
 8000b98:	431a      	orrs	r2, r3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	e007      	b.n	8000bb0 <MCAL_GPIO_INIT+0xda>

			}
			else // GPIO_MODE_INPUT_PD
			{
				//	Table 20. Port bit configuration table Px ODR register = 0 --> pull down
				GPIOx->ODR &=~(PinConfig->GPIO_PinNumber);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	68db      	ldr	r3, [r3, #12]
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	8812      	ldrh	r2, [r2, #0]
 8000ba8:	43d2      	mvns	r2, r2
 8000baa:	401a      	ands	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	60da      	str	r2, [r3, #12]

			}
		}
	}
	(*ConfigRegister) |= Pin_Config <<Get_CRLH_position(PinConfig->GPIO_PinNumber);
 8000bb0:	7bfc      	ldrb	r4, [r7, #15]
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff ff2a 	bl	8000a10 <Get_CRLH_position>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	fa04 f203 	lsl.w	r2, r4, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	431a      	orrs	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	601a      	str	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}

08000bd4 <MCAL_GPIO_WRITE_PIN>:
 * @param[in] - pin value
 * @retval	  - none
 * Note		  - none
================================================================**/
void MCAL_GPIO_WRITE_PIN(GPIO_TypeDef *GPIOx,uint16_t PinNumber,uint8_t PinValue)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
 8000be0:	4613      	mov	r3, r2
 8000be2:	707b      	strb	r3, [r7, #1]
	if (PinValue != (uint8_t)GPIO_PIN_RESET)
 8000be4:	787b      	ldrb	r3, [r7, #1]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <MCAL_GPIO_WRITE_PIN+0x1e>
		//      or
		//		Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//		These bits are write-only and can be accessed in Word mode only.
		//		0: No action on the corresponding ODRx bit
		//		1: Set the corresponding ODRx bit
		GPIOx->BSRR =(uint32_t)PinNumber;
 8000bea:	887a      	ldrh	r2, [r7, #2]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	611a      	str	r2, [r3, #16]
		//		0: No action on the corresponding ODRx bit
		//		1: Reset the corresponding ODRx bit
		GPIOx->BRR =(uint32_t)PinNumber;
	}

}
 8000bf0:	e002      	b.n	8000bf8 <MCAL_GPIO_WRITE_PIN+0x24>
		GPIOx->BRR =(uint32_t)PinNumber;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	615a      	str	r2, [r3, #20]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr

08000c02 <MCAL_GPIO_WRITE_PORT>:
 * @param[in] - port value
 * @retval	  - none
 * Note		  - none
================================================================**/
void MCAL_GPIO_WRITE_PORT(GPIO_TypeDef *GPIOx ,uint16_t PortValue)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)PortValue;
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	60da      	str	r2, [r3, #12]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
	...

08000c20 <clock_init>:
#include "Kaypad.h"
#include "Seven_Segment.h"


void clock_init()
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
	// Enable clock GPIOA
	RCC_GPIOA_CLK_EN();
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <clock_init+0x30>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <clock_init+0x30>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
	// Enable clock GPIOB
	RCC_GPIOB_CLK_EN();
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <clock_init+0x30>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <clock_init+0x30>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	6193      	str	r3, [r2, #24]
	// Enable clock AFIO
	RCC_AFIO_CLK_EN();
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <clock_init+0x30>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a03      	ldr	r2, [pc, #12]	; (8000c50 <clock_init+0x30>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6193      	str	r3, [r2, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000

08000c54 <EXTRIB09_CallBack>:
int flag =0;
void EXTRIB09_CallBack(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
	flag =1;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <EXTRIB09_CallBack+0x20>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTRI9 is happend -| ");
 8000c5e:	4806      	ldr	r0, [pc, #24]	; (8000c78 <EXTRIB09_CallBack+0x24>)
 8000c60:	f7ff fb8a 	bl	8000378 <LCD_WRITE_STRING>
	Wait_m(1000);
 8000c64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c68:	f7ff fbf3 	bl	8000452 <Wait_m>
	LCD_clear_screen();
 8000c6c:	f7ff fbc6 	bl	80003fc <LCD_clear_screen>
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	08000d88 	.word	0x08000d88

08000c7c <main>:
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
	clock_init();
 8000c82:	f7ff ffcd 	bl	8000c20 <clock_init>
	LCD_INIT();
 8000c86:	f7ff fa73 	bl	8000170 <LCD_INIT>
	LCD_clear_screen();
 8000c8a:	f7ff fbb7 	bl	80003fc <LCD_clear_screen>
	EXTRI_PinConfig_t PinConfig;
	PinConfig.PIN_INPUT = EXTRI9PB9;
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <main+0x4c>)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PinConfig.EXTRI_Trigger_Case=EXTRI_Trigger_Failing;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	743b      	strb	r3, [r7, #16]
	PinConfig.P_IRQ_CallBack=EXTRIB09_CallBack;
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <main+0x50>)
 8000c9e:	617b      	str	r3, [r7, #20]
	PinConfig.IRQ_ENABLE=EXTRI_IRQ_Enable;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	747b      	strb	r3, [r7, #17]
	MCAL_EXTRI_GPIO_INIT(&PinConfig);
 8000ca4:	1d3b      	adds	r3, r7, #4
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fda8 	bl	80007fc <MCAL_EXTRI_GPIO_INIT>
	flag=1;
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <main+0x54>)
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
	while (1)
	{
		if (flag)
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <main+0x54>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0fb      	beq.n	8000cb2 <main+0x36>
		{
			LCD_clear_screen();
 8000cba:	f7ff fb9f 	bl	80003fc <LCD_clear_screen>
			flag =0;
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <main+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
		if (flag)
 8000cc4:	e7f5      	b.n	8000cb2 <main+0x36>
 8000cc6:	bf00      	nop
 8000cc8:	08000da4 	.word	0x08000da4
 8000ccc:	08000c55 	.word	0x08000c55
 8000cd0:	2000001c 	.word	0x2000001c

08000cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cd6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cd8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cdc:	480c      	ldr	r0, [pc, #48]	; (8000d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cde:	490d      	ldr	r1, [pc, #52]	; (8000d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <LoopForever+0xe>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	; (8000d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf4:	4c0a      	ldr	r4, [pc, #40]	; (8000d20 <LoopForever+0x16>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d02:	f000 f811 	bl	8000d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d06:	f7ff ffb9 	bl	8000c7c <main>

08000d0a <LoopForever>:

LoopForever:
    b LoopForever
 8000d0a:	e7fe      	b.n	8000d0a <LoopForever>
  ldr   r0, =_estack
 8000d0c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d14:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000d18:	08000db8 	.word	0x08000db8
  ldr r2, =_sbss
 8000d1c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000d20:	20000060 	.word	0x20000060

08000d24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
b Infinite_Loop
 8000d24:	e7fe      	b.n	8000d24 <ADC1_2_IRQHandler>
	...

08000d28 <__libc_init_array>:
 8000d28:	b570      	push	{r4, r5, r6, lr}
 8000d2a:	2500      	movs	r5, #0
 8000d2c:	4e0c      	ldr	r6, [pc, #48]	; (8000d60 <__libc_init_array+0x38>)
 8000d2e:	4c0d      	ldr	r4, [pc, #52]	; (8000d64 <__libc_init_array+0x3c>)
 8000d30:	1ba4      	subs	r4, r4, r6
 8000d32:	10a4      	asrs	r4, r4, #2
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	d109      	bne.n	8000d4c <__libc_init_array+0x24>
 8000d38:	f000 f81a 	bl	8000d70 <_init>
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	4e0a      	ldr	r6, [pc, #40]	; (8000d68 <__libc_init_array+0x40>)
 8000d40:	4c0a      	ldr	r4, [pc, #40]	; (8000d6c <__libc_init_array+0x44>)
 8000d42:	1ba4      	subs	r4, r4, r6
 8000d44:	10a4      	asrs	r4, r4, #2
 8000d46:	42a5      	cmp	r5, r4
 8000d48:	d105      	bne.n	8000d56 <__libc_init_array+0x2e>
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d50:	4798      	blx	r3
 8000d52:	3501      	adds	r5, #1
 8000d54:	e7ee      	b.n	8000d34 <__libc_init_array+0xc>
 8000d56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d5a:	4798      	blx	r3
 8000d5c:	3501      	adds	r5, #1
 8000d5e:	e7f2      	b.n	8000d46 <__libc_init_array+0x1e>
 8000d60:	08000db0 	.word	0x08000db0
 8000d64:	08000db0 	.word	0x08000db0
 8000d68:	08000db0 	.word	0x08000db0
 8000d6c:	08000db4 	.word	0x08000db4

08000d70 <_init>:
 8000d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d72:	bf00      	nop
 8000d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d76:	bc08      	pop	{r3}
 8000d78:	469e      	mov	lr, r3
 8000d7a:	4770      	bx	lr

08000d7c <_fini>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr
